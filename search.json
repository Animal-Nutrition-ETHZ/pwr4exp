[{"path":"https://wangkai7kkw.github.io/pwr4exp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 pwr4exp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction","text":"Performing power analysis pwr4exp involves following steps: first, create design object desired characteristics; , pass either power calculation function sample size determination function. Currently, power calculation doable main effects, interactions, well contrasts, whereas sample size determination can performed main effects interactions. Design objects pwr4exp can created using functions generate several standard designs, well function creating customized designs. Generally, creating design object requires specifying following arguments: Treatment Factors Levels: Represented vector, value indicates number levels treatment factor. example, setting argument treatments = c(2, 3) specifies two treatment factors 2 3 levels, respectively. Number Units Replications: Indicated integer, specific function arguments parameters depend design. Model Formula (formula): Needed capture fixed effects variation data design. design generating function sets default formula internally, can changed based objectives assumptions. Effect Size (beta): Represented expected values main effects interactions model. values can directly set transformed group means. instance, expectation combination treatments treatments = c(2, 3) follows: A1B1 = 10, A1B2 = 8, A1B3 = 6, A2B1 = 12, A2B2 = 14, A2B3 = 10. effect sizes beta = c(10, 2, -2, -4, 4, 2), representing intercept (mean reference group A1B1), main effect A2 (difference mean A2B1 A1B1), main effect B2 (difference mean A1B2 A1B1), main effect B3 (difference mean A1B3 A1B1), interaction effect A2 B2 (additional effect factors second levels (A2B2) compared expected individual main effects), interaction effect A2 B3 (additional effect A2B3 compared expected individual main effects). Variance-Covariance Components (VarCov): Required value designs use models random effects. multiple grouping factors, supply variance-covariance matrix grouping factor list. Error Variance (sigma2). design object created, calculating power determining sample size using pwr4exp straightforward. Simply pass design object power calculator main effects interactions, pwr.anova(), contrasts, pwr.contrast(). determine minimal sample size achieve target power, quoted design object can passed function find_sample_size(). Three types sum squares two methods approximating denominator degrees freedom can set; however, settings affect results balanced designs. default, type III sum squares Satterthwaite’s approximation denominator degrees freedom applied. syntax emmeans (citation) package employed specify types contrast power calculation contrast. pwr4exp package offers functionality power analysis sample size determination standard common designs animal studies, potentially can used various design variants. section provides brief demonstration use functions pwr4exp perform power analysis designs.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"demonstration-scenario-cattle-experiment","dir":"Articles","previous_headings":"","what":"Demonstration Scenario: Cattle Experiment","title":"Introduction","text":"Consider scenario cattle experiment, cows fed two types basal diets differing NDF content (factorA, A1 vs. A2), supplemented feed additives influence enteric methane emission (factorB, B1 vs. B2). objective experiment evaluate effect diet fiber content inhibitor enteric methane emissions. expectation variance response variable methane assumed 6400. expected group means follows: - A1_B1: 470 - A1_B2: 415 - A2_B1: 500 - A2_B2: 450 vector effect size required power analysis beta = c(470, 30, -55, 5), representing: - mean reference group [A1_B1], - main effect A2 [mean difference: A2_B1 - A1_B1], - main effect B2 [mean difference: A1_B2 - A1_B1], - interaction effect A2 B2 [additional effect combination A2 B2 compared expected individual main effects]. treatment design according objective determined, can explore experimental design used.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"completely-randomized-design-crd","dir":"Articles","previous_headings":"","what":"Completely Randomized Design (CRD)","title":"Introduction","text":"CRD, individual cows randomly assigned treatments without considering blocking factors. setup, cows serve experimental units CRD. Assume 10 animals randomly assigned treatment combination, resulting 40 units total. source variation CRD random error variance, equal total variance response variable, assumed 6400.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"creating-an-r-object-for-crd","dir":"Articles","previous_headings":"Completely Randomized Design (CRD)","what":"Creating an R Object for CRD","title":"Introduction","text":"create R object design using designCRD() function, must specify arguments including number treatment levels (treatments), number replicates (replications), model formula (formula), effects (beta), error variance (sigma2). default formula designCRD() includes main effects interaction, can adjusted according objectives assumptions. instance, formula without interaction term can used assumed interaction either absent minimal.","code":"mydesign <- designCRD(   treatments = c(2, 2),   replications = 10,   beta = c(470, 30, -55, 5),   sigma2 = 6400 )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"power-calculation-using-the-crd-design","dir":"Articles","previous_headings":"Completely Randomized Design (CRD)","what":"Power Calculation Using the CRD Design","title":"Introduction","text":"creating design object designCRD() function, can passed power calculation function assess overall test specific contrasts.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"power-calculation-for-main-effects-and-interaction","dir":"Articles","previous_headings":"Completely Randomized Design (CRD)","what":"Power Calculation for Main Effects and Interaction","title":"Introduction","text":"power calculation main effects diet, additive, interaction can performed using pwr.anova() function:","code":"pwr.anova(mydesign) #> Power analysis of Completely randomized design design #>           NumDF DenDF non-centrality alpha   power #> facA          1    36         1.6504  0.05 0.23969 #> facB          1    36         4.3066  0.05 0.52386 #> facA:facB     1    36         0.0098  0.05 0.05106"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"power-calculation-for-specific-contrasts","dir":"Articles","previous_headings":"Completely Randomized Design (CRD)","what":"Power Calculation for Specific Contrasts","title":"Introduction","text":"Power calculations can also performed specific contrasts, comparing A2 vs. A1 level factor B. analysis helps assess whether differences levels statistically significant extent. perform power calculation, pwr.contrast() function pwr4exp package used. ’s execute :","code":"pwr.contrast(design = mydesign, specs = ~ facB | facA, contrast = \"pairwise\") #>        contrast facA estimate df non-centrality alpha     power #> 1 facB1 - facB2    1       55 36       2.363281  0.05 0.3217413 #> 2 facB1 - facB2    2       50 36       1.953125  0.05 0.2748401"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"randomized-complete-block-design-rcbd","dir":"Articles","previous_headings":"","what":"Randomized Complete Block Design (RCBD)","title":"Introduction","text":"RCBD beneficial ’s variability among experimental units influence measurement response variable. design helps reduce error variance blocking factors may contribute variability.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"setting-up-the-rcb","dir":"Articles","previous_headings":"Randomized Complete Block Design (RCBD)","what":"Setting up the RCB","title":"Introduction","text":"continuation previous example using CRD, assume now can block experimental units one block factor, days milk. using 10 blocks cows close days milk within block, error variance due uncontrolled factors expected reduce. results total 40 cows distributed evenly across blocks. Assuming variance blocks 3200, effectively reduce error variance previous 6400 3200, enhancing precision experiment’s results.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"creating-the-design-object","dir":"Articles","previous_headings":"Randomized Complete Block Design (RCBD)","what":"Creating the Design Object","title":"Introduction","text":"design object RCB can created designRCB() function, specifying variance blocks (VarCov), reduced error variance (sigma2):","code":"mydesign <- designRCB(   treatments = c(2, 2),    blocks = 10,    beta = c(470, 30, -55, 5),    VarCov = 3200,    sigma2 = 3200 )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"power-calculation-for-main-effects-and-interaction-1","dir":"Articles","previous_headings":"Randomized Complete Block Design (RCBD)","what":"Power Calculation for Main Effects and Interaction","title":"Introduction","text":"reduction error variance led following changes ability detect significant effects: Inhibitor: power detecting main effect inhibitor increased 0.8, indicating strong likelihood correctly identifying true effect inhibitor methane emissions. Diet: Despite improvements, power detecting main effect diet remains desired threshold 0.8. suggests diet’s impact might subtler require larger sample size different blocking strategy detect effectively.","code":"pwr.anova(mydesign) #> Power analysis of Randomized complete block design design #>           NumDF DenDF non-centrality alpha   power #> facA          1    27         3.3008  0.05 0.41779 #> facB          1    27         8.6133  0.05 0.80760 #> facA:facB     1    27         0.0195  0.05 0.05209"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"determining-the-number-of-blocks-required-for-adequate-power","dir":"Articles","previous_headings":"Randomized Complete Block Design (RCBD)","what":"Determining the Number of Blocks Required for Adequate Power","title":"Introduction","text":"order achieve desired power 0.8 testing effects diet inhibitor RCBD, crucial determine optimal number blocks required. find_sample_size function can utilized purpose, taking quoted design object input estimate minimum number blocks needed. function allows setting range number blocks considered, minimum (n_min, default 2) maximum (n_max, default 99). However, demonstration purposes, use maximum 99, acknowledging high number blocks typically unfeasible controlled animal experiments:","code":"# Quoting the design to be evaluated with varying number of blocks mydesign_quote <- quote(designRCB(treatments = c(2, 2), blocks = n, beta = c(470, 30, -55, 5), VarCov = 3200, sigma2 = 3200))  # Finding the required number of blocks to achieve a power of 0.8 required_blocks <- find_sample_size(design = mydesign_quote, n_min = 2, n_max = 99, power = 0.8) print(required_blocks) #>           alpha      power best_n #> facA       0.05 0.80898088     25 #> facB       0.05 0.80760263     10 #> facA:facB  0.05 0.05023862     NA"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"latin-square-design-lsd-for-multiple-sources-of-variation","dir":"Articles","previous_headings":"","what":"Latin Square Design (LSD) for Multiple Sources of Variation","title":"Introduction","text":"Latin Square Design (LSD) particularly advantageous dealing one source variation. allows control two sources simultaneously organizing experimental units square matrix. row column matrix represent different source variation, treatment represented exactly row column within block. arrangement ensures treatments uniformly distributed across sources variability.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"extending-the-rcb-example-to-lsd","dir":"Articles","previous_headings":"Latin Square Design (LSD) for Multiple Sources of Variation","what":"Extending the RCB Example to LSD","title":"Introduction","text":"Building example Randomized Complete Block Design section, now consider two blocking factors: cow period. experimental setup designed can conducted several different time periods. cows receive treatments different sequences, making cows time periods important blocking factors. specific setup time periods one block factor often referred crossover design. Assuming replicate single Latin square three times, arrange 12 animals 4×4 Latin Squares, resulting total 48 experimental units.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"variance-assumptions-and-design-setup","dir":"Articles","previous_headings":"Latin Square Design (LSD) for Multiple Sources of Variation","what":"Variance Assumptions and Design Setup","title":"Introduction","text":"assume variance cows periods 3200 1600, respectively. arrangement significantly reduces error variance total variance previously assumed 6400 1600.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"creating-the-design-object-1","dir":"Articles","previous_headings":"Latin Square Design (LSD) for Multiple Sources of Variation","what":"Creating the Design Object","title":"Introduction","text":"design object LSD set using designLSD() function. function: - squares argument specifies number squares replicating Latin Squares. - variances random effects cows periods need supplied list VarCov argument, reflecting respective contributions total variance.","code":"mydesign <- designLSD(     treatments = c(2, 2),     squares = 3,     reuse = \"col\",  # Ensuring each treatment appears once per column     formula = y ~ facA*facB + (1|col) + (1|row),     beta = c(470, 30, -55, 5),      VarCov = list(1600, 3200),     sigma2 = 1600 )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"power-for-main-effects-and-interaction","dir":"Articles","previous_headings":"Latin Square Design (LSD) for Multiple Sources of Variation","what":"Power for Main Effects and Interaction","title":"Introduction","text":"","code":"pwr.anova(mydesign) #> Power analysis of Latin square design design #>           NumDF DenDF non-centrality alpha   power #> facA          1    30         7.9219  0.05 0.77743 #> facB          1    30        20.6719  0.05 0.99259 #> facA:facB     1    30         0.0469  0.05 0.05505"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"special-design-combining-split-plot-with-latin-square-design-lsd","dir":"Articles","previous_headings":"","what":"Special Design: Combining Split-Plot with Latin Square Design (LSD)","title":"Introduction","text":"subsection demonstrates conduct power analysis specialized experimental design incorporates elements split-plot LSD. setup, assess effects diet additives also include breed cows main plot factor.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"experimental-setup","dir":"Articles","previous_headings":"Special Design: Combining Split-Plot with Latin Square Design (LSD)","what":"Experimental Setup","title":"Introduction","text":"Continuing LSD, now integrate split-plot design including two breeds cows. Specifically, 16 cows (8 breed) arranged replicated 4x4 LSD. , cows serve main plots, breed main plot factor, diet additives managed subplot factors within Latin square.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/Introduction.html","id":"creating-the-customized-design","dir":"Articles","previous_headings":"Special Design: Combining Split-Plot with Latin Square Design (LSD)","what":"Creating the Customized Design","title":"Introduction","text":"manage complex design, utilize designCustom function pwr4exp package, allows creation power analysis model using custom data frame defines structure design. First, construct data frame representing layout 4x4 LSD 16 cows, assigning 8 cows breed: Next, create design object: Power Calculation Main Effects Interaction:","code":"mydf <- df.crossover(treatments = c(2, 2), squares = 4) mydf$breed <- rep(c(\"Hol\", \"Jer\"), each = 32) names(mydf) <- c(\"cow\", \"period\", \"treatment\", 'diet', 'additive', 'square', 'breed') mydf <- mydf[, c(\"cow\", \"breed\", \"period\", 'diet', 'additive')] head(mydf, n = 4)  # Displays the first four entries #>   cow breed period diet additive #> 1   1   Hol      1    2        1 #> 2   2   Hol      1    1        2 #> 3   3   Hol      1    2        2 #> 4   4   Hol      1    1        1 tail(mydf, n = 4)  # Displays the last four entries #>    cow breed period diet additive #> 61  13   Jer      4    1        1 #> 62  14   Jer      4    2        1 #> 63  15   Jer      4    1        2 #> 64  16   Jer      4    2        2 mydesign <- designCustom(     design.df = mydf,     formula = y ~ breed + diet*additive + (1|cow) + (1|period),     beta = c(470, 20, 30, -55, 5),     VarCov = list(3200, 1600),     sigma2 = 1600,     design.name = \"Customized design\" ) pwr.anova(mydesign) #> Power analysis of Customized design design #>               NumDF DenDF non-centrality alpha   power #> breed             1    14         0.4444  0.05 0.09537 #> diet              1    42        10.5625  0.05 0.88779 #> additive          1    42        27.5625  0.05 0.99923 #> diet:additive     1    42         0.0625  0.05 0.05687"},{"path":"https://wangkai7kkw.github.io/pwr4exp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Wang. Author, maintainer.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang K (2024). pwr4exp: Power Analysis Experiment Designs Animal Studies. R package version 0.0.0.9000, https://wangkai7kkw.github.io/pwr4exp/, https://github.com/WangKai7kkw/pwr4exp.","code":"@Manual{,   title = {pwr4exp: Power Analysis for Experiment Designs in Animal Studies},   author = {Kai Wang},   year = {2024},   note = {R package version 0.0.0.9000, https://wangkai7kkw.github.io/pwr4exp/},   url = {https://github.com/WangKai7kkw/pwr4exp}, }"},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"pwr4exp","dir":"","previous_headings":"","what":"Power Analysis for Experiment Designs in Animal Studies","title":"Power Analysis for Experiment Designs in Animal Studies","text":"pwr4exp R package provides functions power calculation sample size determination animal experiments. package emphasizes importance specifying models conducting power analyses supports power analyses main effects, interactions, specific contrasts. Additionally, pwr4exp offers flexible framework perform power analysis customized designs currently predefined package. pwr4exp R package provides functions power calculation sample size determination animal experiments. pwr4exp emphasizes importance specifying models conducting power analyses enables power analyses main effects, interactions, specific contrasts. Additionally, pwr4exp offers flexible framework allows users perform power analysis customized designs defined package curretly.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power Analysis for Experiment Designs in Animal Studies","text":"can install development version pwr4exp GitHub :","code":"devtools::install_github(\"WangKai7kkw/pwr4exp\", dependencies = TRUE, build_vignettes = TRUE)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Power Analysis for Experiment Designs in Animal Studies","text":"Performing power analysis pwr4exp involves following steps: - First, create desired design object (list) using design generating functions. - design object created, calculating power determining sample size using pwr4exp straightforward. Simply pass design object power calculator main effects interactions, pwr.anova(), contrasts, pwr.contrast(). - determine minimal sample size achieve target power, quoted design object can passed function find_sample_size().","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"example-usage","dir":"","previous_headings":"Functions","what":"Example Usage","title":"Power Analysis for Experiment Designs in Animal Studies","text":"’s example can generate design calculate power:","code":"library(pwr4exp) # Define a design my_design <- designCRD(   treatments = c(2, 2),   replications = 10,   beta = c(470, 30, -55, 5),   sigma2 = 6400 )  # Calculate power for main effects and interaction pwr.anova(design = my_design)  # Calculate power for contrasts pwr.contrast(design = mydesign, specs = ~ facB | facA, contrast = \"pairwise\") pwr.contrast(design = mydesign, specs = ~ facB * facA, contrast = \"pairwise\")"},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"Power Analysis for Experiment Designs in Animal Studies","text":"learn pwr4exp, read vignette pwr4exp contains: Details provide required inputs. Examples calculating power determining sample size completely randomized design, random complete block design, Latin Square design. Examples using pwr4exp assess power customized design. Additionally, information available package website. documentation package updated. questions suggestions, please feel free contact package maintainer.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate covariance parameter vector (theta) — calc.theta","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"function calculates covariance parameter vector","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"","code":"calc.theta(VarCov, sigma)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"VarCov variance-covariance components random effects. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma error standard deviation","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"covariance parameter vector","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"details structure estimation theta, refer documentation getME function lme4 package.","code":""},{"path":[]},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/customLmerMod-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend lmerModLmerTest class — customLmerMod-class","title":"Extend lmerModLmerTest class — customLmerMod-class","text":"class extends lmerModLmerTest adding DenDF slot.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/customLmerMod-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Extend lmerModLmerTest class — customLmerMod-class","text":"DenDF Numeric vector denominator degrees freedom.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":null,"dir":"Reference","previous_headings":"","what":"#' Create Completely Randomized Design — designCRD","title":"#' Create Completely Randomized Design — designCRD","text":"#' Create Completely Randomized Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"#' Create Completely Randomized Design — designCRD","text":"","code":"designCRD(treatments, replications, formula, beta, sigma2, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"#' Create Completely Randomized Design — designCRD","text":"treatments vector representing number levels treatment factors sequentially. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. replications number experimental units group formula object class formula: symbolic description model used assess treatment effects, contain fixed components sources variation according experimental designs, assumptions, objectives. details model specification fixed effects see lm random effects see lmer. beta effect size: vector including expectations intercept, main effects factors interactions factors. Vector values order coefficients model fitted using exact data contr.treatment. sigma2 error variance ... additional arguments passed fit.pseu.model","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"#' Create Completely Randomized Design — designCRD","text":"list object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"#' Create Completely Randomized Design — designCRD","text":"","code":"mydesign <- designCRD(treatments = c(2, 2),                       replications = 4,                       beta = c(10, 9, 8, 7),                       sigma2 = 10)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCrossover.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Crossover Design — designCrossover","title":"Create Crossover Design — designCrossover","text":"Create Crossover Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCrossover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Crossover Design — designCrossover","text":"","code":"designCrossover(treatments, squares, formula, beta, VarCov, sigma2, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCrossover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Crossover Design — designCrossover","text":"treatments vector representing number levels treatment factors sequentially. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. squares number replicated squares formula object class formula: symbolic description model used assess treatment effects, contain fixed components sources variation according experimental designs, assumptions, objectives. details model specification fixed effects see lm random effects see lmer. beta effect size: vector including expectations intercept, main effects factors interactions factors. Vector values order coefficients model fitted using exact data contr.treatment. VarCov variance-covariance components random effects. multiple random effects one grouping factor, supply variance-covariance components matrix order random effects specified model formula. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance ... additional arguments passed fit.pseu.model","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCrossover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Crossover Design — designCrossover","text":"list object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCrossover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Crossover Design — designCrossover","text":"","code":"mydesign <- designCrossover(treatments = c(2, 2),                             squares = 4,                             beta = c(10, 9, 8, 7),                             VarCov = list(9, 4),                             sigma2 = 10)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCustom.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Customized Design — designCustom","title":"Create Customized Design — designCustom","text":"Create Customized Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCustom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Customized Design — designCustom","text":"","code":"designCustom(design.df, formula, beta, VarCov, sigma2, design.name, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCustom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Customized Design — designCustom","text":"design.df data frame design matrix formula object class formula: symbolic description model used assess treatment effects, contain fixed components sources variation according experimental designs, assumptions, objectives. details model specification fixed effects see lm random effects see lmer. beta effect size: vector including expectations intercept, main effects factors interactions factors. Vector values order coefficients model fitted using exact data contr.treatment. VarCov variance-covariance components random effects. multiple random effects one grouping factor, supply variance-covariance components matrix order random effects specified model formula. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance design.name name design ... additional arguments passed fit.pseu.model","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCustom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Customized Design — designCustom","text":"list object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Latin Square Design — designLSD","title":"Create Latin Square Design — designLSD","text":"Create Latin Square Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Latin Square Design — designLSD","text":"","code":"designLSD(   treatments,   squares = 1,   reuse = c(\"row\", \"col\", \"both\"),   formula,   beta,   VarCov,   sigma2,   ... )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Latin Square Design — designLSD","text":"treatments vector representing number levels treatment factors sequentially. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. squares integer, number replicated squares reuse character string: \"row\", \"col\", \"\", indicating reuse rows columns replicate Latin square formula object class formula: symbolic description model used assess treatment effects, contain fixed components sources variation according experimental designs, assumptions, objectives. details model specification fixed effects see lm random effects see lmer. beta effect size: vector including expectations intercept, main effects factors interactions factors. Vector values order coefficients model fitted using exact data contr.treatment. VarCov variance-covariance components random effects. multiple random effects one grouping factor, supply variance-covariance components matrix order random effects specified model formula. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance ... additional arguments passed fit.pseu.model","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Latin Square Design — designLSD","text":"list object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Latin Square Design — designLSD","text":"","code":"mydesign <- designLSD(treatments = c(2, 2),                       squares = 4,                       reuse = \"col\",                       beta = c(10, 9, 8, 7),                       VarCov = list(9, 4, 6),                       sigma2 = 10)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCB.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Randomized Complete Block Design — designRCB","title":"Create Randomized Complete Block Design — designRCB","text":"Create Randomized Complete Block Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Randomized Complete Block Design — designRCB","text":"","code":"designRCB(treatments, blocks, formula, beta, VarCov, sigma2, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Randomized Complete Block Design — designRCB","text":"treatments vector representing number levels treatment factors sequentially. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. blocks number blocks formula object class formula: symbolic description model used assess treatment effects, contain fixed components sources variation according experimental designs, assumptions, objectives. details model specification fixed effects see lm random effects see lmer. beta effect size: vector including expectations intercept, main effects factors interactions factors. Vector values order coefficients model fitted using exact data contr.treatment. VarCov variance-covariance components random effects. multiple random effects one grouping factor, supply variance-covariance components matrix order random effects specified model formula. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance ... additional arguments passed fit.pseu.model","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Randomized Complete Block Design — designRCB","text":"list object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Randomized Complete Block Design — designRCB","text":"","code":"mydesign = designRCB(treatments = c(2, 2),                       blocks = 10,                       beta = c(10, 9, 8, 7),                       VarCov = 8,                       sigma2 = 9)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSplitplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Split Plot Design — designSplitplot","title":"Create Split Plot Design — designSplitplot","text":"Create Split Plot Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSplitplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Split Plot Design — designSplitplot","text":"","code":"designSplitplot(   trt.main,   trt.sub,   replications,   formula,   beta,   VarCov,   sigma2,   ... )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSplitplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Split Plot Design — designSplitplot","text":"trt.main vector representing number levels main plot factors sequentially. trt.sub vector representing number levels subplot factors sequentially. replications number main plots main plot group formula object class formula: symbolic description model used assess treatment effects, contain fixed components sources variation according experimental designs, assumptions, objectives. details model specification fixed effects see lm random effects see lmer. beta effect size: vector including expectations intercept, main effects factors interactions factors. Vector values order coefficients model fitted using exact data contr.treatment. VarCov variance-covariance components random effects. multiple random effects one grouping factor, supply variance-covariance components matrix order random effects specified model formula. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance ... additional arguments passed fit.pseu.model","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSplitplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Split Plot Design — designSplitplot","text":"list object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSplitplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Split Plot Design — designSplitplot","text":"","code":"mydesign <- designSplitplot(trt.main = 2,                             trt.sub = 4,                            replications = 6,                            beta = c(10, -2, 3, 4, 5, 1, 3, 0),                            VarCov = 4,                            sigma2 = 6)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for completely randomized design — df.crd","title":"Create data frame for completely randomized design — df.crd","text":"Create data frame completely randomized design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for completely randomized design — df.crd","text":"","code":"df.crd(treatments, replications)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for completely randomized design — df.crd","text":"treatments vector representing number levels treatment factors sequentially. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. replications number experimental units group","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for completely randomized design — df.crd","text":"data.frame columns treatment factors replications","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data frame for completely randomized design — df.crd","text":"","code":"df.crd(5, 3) #>    treatment replication #> 1          1           1 #> 2          2           1 #> 3          3           1 #> 4          4           1 #> 5          5           1 #> 6          1           2 #> 7          2           2 #> 8          3           2 #> 9          4           2 #> 10         5           2 #> 11         1           3 #> 12         2           3 #> 13         3           3 #> 14         4           3 #> 15         5           3"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crossover.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for Crossover design — df.crossover","title":"Create data frame for Crossover design — df.crossover","text":"Create data frame Crossover design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crossover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for Crossover design — df.crossover","text":"","code":"df.crossover(treatments, squares)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crossover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for Crossover design — df.crossover","text":"treatments vector representing number levels treatment factors sequentially. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. squares number replicated squares","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crossover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for Crossover design — df.crossover","text":"data.frame columns treatment factors, individuals (row block factor), period (column block factor), squares","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crossover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data frame for Crossover design — df.crossover","text":"","code":"df.crossover(4, 5) #>    row period treatment square #> 1    1      1         2      1 #> 2    2      1         3      1 #> 3    3      1         4      1 #> 4    4      1         1      1 #> 5    1      2         3      1 #> 6    2      2         4      1 #> 7    3      2         1      1 #> 8    4      2         2      1 #> 9    1      3         4      1 #> 10   2      3         1      1 #> 11   3      3         2      1 #> 12   4      3         3      1 #> 13   1      4         1      1 #> 14   2      4         2      1 #> 15   3      4         3      1 #> 16   4      4         4      1 #> 17   5      1         2      2 #> 18   6      1         3      2 #> 19   7      1         4      2 #> 20   8      1         1      2 #> 21   5      2         3      2 #> 22   6      2         4      2 #> 23   7      2         1      2 #> 24   8      2         2      2 #> 25   5      3         4      2 #> 26   6      3         1      2 #> 27   7      3         2      2 #> 28   8      3         3      2 #> 29   5      4         1      2 #> 30   6      4         2      2 #> 31   7      4         3      2 #> 32   8      4         4      2 #> 33   9      1         2      3 #> 34  10      1         3      3 #> 35  11      1         4      3 #> 36  12      1         1      3 #> 37   9      2         3      3 #> 38  10      2         4      3 #> 39  11      2         1      3 #> 40  12      2         2      3 #> 41   9      3         4      3 #> 42  10      3         1      3 #> 43  11      3         2      3 #> 44  12      3         3      3 #> 45   9      4         1      3 #> 46  10      4         2      3 #> 47  11      4         3      3 #> 48  12      4         4      3 #> 49  13      1         2      4 #> 50  14      1         3      4 #> 51  15      1         4      4 #> 52  16      1         1      4 #> 53  13      2         3      4 #> 54  14      2         4      4 #> 55  15      2         1      4 #> 56  16      2         2      4 #> 57  13      3         4      4 #> 58  14      3         1      4 #> 59  15      3         2      4 #> 60  16      3         3      4 #> 61  13      4         1      4 #> 62  14      4         2      4 #> 63  15      4         3      4 #> 64  16      4         4      4 #> 65  17      1         2      5 #> 66  18      1         3      5 #> 67  19      1         4      5 #> 68  20      1         1      5 #> 69  17      2         3      5 #> 70  18      2         4      5 #> 71  19      2         1      5 #> 72  20      2         2      5 #> 73  17      3         4      5 #> 74  18      3         1      5 #> 75  19      3         2      5 #> 76  20      3         3      5 #> 77  17      4         1      5 #> 78  18      4         2      5 #> 79  19      4         3      5 #> 80  20      4         4      5"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for Latin square design — df.lsd","title":"Create data frame for Latin square design — df.lsd","text":"Create data frame Latin square design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for Latin square design — df.lsd","text":"","code":"df.lsd(treatments, squares = 1, reuse = c(\"row\", \"col\", \"both\"))"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for Latin square design — df.lsd","text":"treatments vector representing number levels treatment factors sequentially. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. squares number replicated squares reuse character string: \"row\", \"col\", \"\", indicating reuse rows columns replicate Latin square","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for Latin square design — df.lsd","text":"data.frame columns treatment factors, row column block factors, squares","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data frame for Latin square design — df.lsd","text":"","code":"df.lsd(5, 3) #>    row col treatment square #> 1    1   1         2      1 #> 2    2   1         3      1 #> 3    3   1         4      1 #> 4    4   1         5      1 #> 5    5   1         1      1 #> 6    1   2         3      1 #> 7    2   2         4      1 #> 8    3   2         5      1 #> 9    4   2         1      1 #> 10   5   2         2      1 #> 11   1   3         4      1 #> 12   2   3         5      1 #> 13   3   3         1      1 #> 14   4   3         2      1 #> 15   5   3         3      1 #> 16   1   4         5      1 #> 17   2   4         1      1 #> 18   3   4         2      1 #> 19   4   4         3      1 #> 20   5   4         4      1 #> 21   1   5         1      1 #> 22   2   5         2      1 #> 23   3   5         3      1 #> 24   4   5         4      1 #> 25   5   5         5      1 #> 26   1   6         2      2 #> 27   2   6         3      2 #> 28   3   6         4      2 #> 29   4   6         5      2 #> 30   5   6         1      2 #> 31   1   7         3      2 #> 32   2   7         4      2 #> 33   3   7         5      2 #> 34   4   7         1      2 #> 35   5   7         2      2 #> 36   1   8         4      2 #> 37   2   8         5      2 #> 38   3   8         1      2 #> 39   4   8         2      2 #> 40   5   8         3      2 #> 41   1   9         5      2 #> 42   2   9         1      2 #> 43   3   9         2      2 #> 44   4   9         3      2 #> 45   5   9         4      2 #> 46   1  10         1      2 #> 47   2  10         2      2 #> 48   3  10         3      2 #> 49   4  10         4      2 #> 50   5  10         5      2 #> 51   1  11         2      3 #> 52   2  11         3      3 #> 53   3  11         4      3 #> 54   4  11         5      3 #> 55   5  11         1      3 #> 56   1  12         3      3 #> 57   2  12         4      3 #> 58   3  12         5      3 #> 59   4  12         1      3 #> 60   5  12         2      3 #> 61   1  13         4      3 #> 62   2  13         5      3 #> 63   3  13         1      3 #> 64   4  13         2      3 #> 65   5  13         3      3 #> 66   1  14         5      3 #> 67   2  14         1      3 #> 68   3  14         2      3 #> 69   4  14         3      3 #> 70   5  14         4      3 #> 71   1  15         1      3 #> 72   2  15         2      3 #> 73   3  15         3      3 #> 74   4  15         4      3 #> 75   5  15         5      3"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for randomized complete block design — df.rcb","title":"Create data frame for randomized complete block design — df.rcb","text":"Create data frame randomized complete block design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for randomized complete block design — df.rcb","text":"","code":"df.rcb(treatments, blocks)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for randomized complete block design — df.rcb","text":"treatments vector representing number levels treatment factors sequentially. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. blocks number blocks","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for randomized complete block design — df.rcb","text":"data.frame columns blocks treatment factors","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data frame for randomized complete block design — df.rcb","text":"","code":"df.rcb(5, 2) #>    treatment block #> 1          1     1 #> 2          2     1 #> 3          3     1 #> 4          4     1 #> 5          5     1 #> 6          1     2 #> 7          2     2 #> 8          3     2 #> 9          4     2 #> 10         5     2"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.splitplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for split-plot design — df.splitplot","title":"Create data frame for split-plot design — df.splitplot","text":"Create data frame split-plot design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.splitplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for split-plot design — df.splitplot","text":"","code":"df.splitplot(trt.main, trt.sub, replications)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.splitplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for split-plot design — df.splitplot","text":"trt.main vector representing number levels main plot treatment factors sequentially. trt.sub vector representing number levels sub plot treatment factors sequentially. replications number replications main plots","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.splitplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for split-plot design — df.splitplot","text":"data.frame columns main plots, main treatments, sub-treatments","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.splitplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data frame for split-plot design — df.splitplot","text":"","code":"df.splitplot(3, 4, 15) #>     mainplots trt.main trt.sub #> 1           1        1       1 #> 2           1        1       2 #> 3           1        1       3 #> 4           1        1       4 #> 5           2        2       1 #> 6           2        2       2 #> 7           2        2       3 #> 8           2        2       4 #> 9           3        3       1 #> 10          3        3       2 #> 11          3        3       3 #> 12          3        3       4 #> 13          4        1       1 #> 14          4        1       2 #> 15          4        1       3 #> 16          4        1       4 #> 17          5        2       1 #> 18          5        2       2 #> 19          5        2       3 #> 20          5        2       4 #> 21          6        3       1 #> 22          6        3       2 #> 23          6        3       3 #> 24          6        3       4 #> 25          7        1       1 #> 26          7        1       2 #> 27          7        1       3 #> 28          7        1       4 #> 29          8        2       1 #> 30          8        2       2 #> 31          8        2       3 #> 32          8        2       4 #> 33          9        3       1 #> 34          9        3       2 #> 35          9        3       3 #> 36          9        3       4 #> 37         10        1       1 #> 38         10        1       2 #> 39         10        1       3 #> 40         10        1       4 #> 41         11        2       1 #> 42         11        2       2 #> 43         11        2       3 #> 44         11        2       4 #> 45         12        3       1 #> 46         12        3       2 #> 47         12        3       3 #> 48         12        3       4 #> 49         13        1       1 #> 50         13        1       2 #> 51         13        1       3 #> 52         13        1       4 #> 53         14        2       1 #> 54         14        2       2 #> 55         14        2       3 #> 56         14        2       4 #> 57         15        3       1 #> 58         15        3       2 #> 59         15        3       3 #> 60         15        3       4 #> 61         16        1       1 #> 62         16        1       2 #> 63         16        1       3 #> 64         16        1       4 #> 65         17        2       1 #> 66         17        2       2 #> 67         17        2       3 #> 68         17        2       4 #> 69         18        3       1 #> 70         18        3       2 #> 71         18        3       3 #> 72         18        3       4 #> 73         19        1       1 #> 74         19        1       2 #> 75         19        1       3 #> 76         19        1       4 #> 77         20        2       1 #> 78         20        2       2 #> 79         20        2       3 #> 80         20        2       4 #> 81         21        3       1 #> 82         21        3       2 #> 83         21        3       3 #> 84         21        3       4 #> 85         22        1       1 #> 86         22        1       2 #> 87         22        1       3 #> 88         22        1       4 #> 89         23        2       1 #> 90         23        2       2 #> 91         23        2       3 #> 92         23        2       4 #> 93         24        3       1 #> 94         24        3       2 #> 95         24        3       3 #> 96         24        3       4 #> 97         25        1       1 #> 98         25        1       2 #> 99         25        1       3 #> 100        25        1       4 #> 101        26        2       1 #> 102        26        2       2 #> 103        26        2       3 #> 104        26        2       4 #> 105        27        3       1 #> 106        27        3       2 #> 107        27        3       3 #> 108        27        3       4 #> 109        28        1       1 #> 110        28        1       2 #> 111        28        1       3 #> 112        28        1       4 #> 113        29        2       1 #> 114        29        2       2 #> 115        29        2       3 #> 116        29        2       4 #> 117        30        3       1 #> 118        30        3       2 #> 119        30        3       3 #> 120        30        3       4 #> 121        31        1       1 #> 122        31        1       2 #> 123        31        1       3 #> 124        31        1       4 #> 125        32        2       1 #> 126        32        2       2 #> 127        32        2       3 #> 128        32        2       4 #> 129        33        3       1 #> 130        33        3       2 #> 131        33        3       3 #> 132        33        3       4 #> 133        34        1       1 #> 134        34        1       2 #> 135        34        1       3 #> 136        34        1       4 #> 137        35        2       1 #> 138        35        2       2 #> 139        35        2       3 #> 140        35        2       4 #> 141        36        3       1 #> 142        36        3       2 #> 143        36        3       3 #> 144        36        3       4 #> 145        37        1       1 #> 146        37        1       2 #> 147        37        1       3 #> 148        37        1       4 #> 149        38        2       1 #> 150        38        2       2 #> 151        38        2       3 #> 152        38        2       4 #> 153        39        3       1 #> 154        39        3       2 #> 155        39        3       3 #> 156        39        3       4 #> 157        40        1       1 #> 158        40        1       2 #> 159        40        1       3 #> 160        40        1       4 #> 161        41        2       1 #> 162        41        2       2 #> 163        41        2       3 #> 164        41        2       4 #> 165        42        3       1 #> 166        42        3       2 #> 167        42        3       3 #> 168        42        3       4 #> 169        43        1       1 #> 170        43        1       2 #> 171        43        1       3 #> 172        43        1       4 #> 173        44        2       1 #> 174        44        2       2 #> 175        44        2       3 #> 176        44        2       4 #> 177        45        3       1 #> 178        45        3       2 #> 179        45        3       3 #> 180        45        3       4"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/find_sample_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the sample size required to achieve a target power — find_sample_size","title":"Determine the sample size required to achieve a target power — find_sample_size","text":"function finds sample size required achieve target power given design quote.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/find_sample_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the sample size required to achieve a target power — find_sample_size","text":"","code":"find_sample_size(   design.quote,   alpha = 0.05,   target.power = 0.8,   n_init = 2,   n_max = 99,   ... )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/find_sample_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the sample size required to achieve a target power — find_sample_size","text":"design.quote design quote use alpha significance level, default 0.05 target.power target power achieve, default 0.8 n_init initial sample size start , default 2 n_max maximum sample size try, default 99 ... Additional arguments pass pwr.anova","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/find_sample_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the sample size required to achieve a target power — find_sample_size","text":"data frame alpha, power, best sample size sample size tried, NA power achieved within maximum sample size","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/fit.pseu.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an artificial model object — fit.pseu.model","title":"Create an artificial model object — fit.pseu.model","text":"Create pseudo model object structure model object fitted using exact data. Model coefficients replaced effect size specified argument beta. variance-covariance matrix random effects replaced argument VarCov. standard deviation error replaced argument sigma.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/fit.pseu.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an artificial model object — fit.pseu.model","text":"","code":"fit.pseu.model(formula, data, beta, VarCov, sigma, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/fit.pseu.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an artificial model object — fit.pseu.model","text":"formula object class formula: symbolic description model used assess treatment effects, contain fixed components sources variation according experimental designs, assumptions, objectives. details model specification fixed effects see lm random effects see lmer. data data frame independent variables design, e.g., treatment factors, block factors. beta effect size: vector including expectations intercept, main effects factors interactions factors. Vector values order coefficients model fitted using exact data contr.treatment. VarCov variance-covariance components random effects. multiple random effects one grouping factor, supply variance-covariance components matrix order random effects specified model formula. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma standard deviation error ... arguments passed anova.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/fit.pseu.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an artificial model object — fit.pseu.model","text":"pseudo model object lmerMod lm.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Power calculation for main effects and interactions — pwr.anova","title":"Power calculation for main effects and interactions — pwr.anova","text":"Calculate power testing overall effects factors interactions form ANOVA table.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power calculation for main effects and interactions — pwr.anova","text":"","code":"pwr.anova(design, alpha, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power calculation for main effects and interactions — pwr.anova","text":"design list object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects. alpha significance level, type error. default 0.05 ... arguments passed anova. default, type III sum squares Satterthwaite’s approximation denominator degrees freedom applied.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power calculation for main effects and interactions — pwr.anova","text":"data frame","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power calculation for main effects and interactions — pwr.anova","text":"","code":"mydesign = designCRD(treatments = c(2, 2),                      beta = c(10, 9, 8, 7),                      sigma2 = 9,                      replications = 10) pwr.anova(mydesign) #> Power analysis of Completely randomized design design #>           NumDF DenDF non-centrality alpha   power #> facA          1    36        173.611  0.05 1.00000 #> facB          1    36        146.944  0.05 1.00000 #> facA:facB     1    36         13.611  0.05 0.94837  mydesign = designRCB(treatments = c(2, 2),                       blocks = 10,                       beta = c(10, 9, 8, 7),                       VarCov = 8,                       sigma2 = 9) pwr.anova(mydesign) #> Power analysis of Randomized complete block design design #>           NumDF DenDF non-centrality alpha   power #> facA          1    27        173.611  0.05 1.00000 #> facB          1    27        146.944  0.05 1.00000 #> facA:facB     1    27         13.611  0.05 0.94467"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Power calculation for contrasts — pwr.contrast","title":"Power calculation for contrasts — pwr.contrast","text":"Calculate power testing various contrasts fixed effects. syntax emmeans package employed specify contrast types.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power calculation for contrasts — pwr.contrast","text":"","code":"pwr.contrast(design, specs, contrast, alpha = 0.05, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power calculation for contrasts — pwr.contrast","text":"design list object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects. specs see emmeans contrast see contrast alpha significance level, type error. default 0.05 ... arguments passed contrast. default, kenward-roger approximation degrees freedom applied.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power calculation for contrasts — pwr.contrast","text":"data frame","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power calculation for contrasts — pwr.contrast","text":"","code":"mydesign = designRCB(treatments = c(2, 2),                      blocks = 10,                      beta = c(10, 9, 8, 7),                      VarCov = 8, sigma2 = 9) pwr.contrast(mydesign, ~ facA|facB, contrast = \"pairwise\") #>        contrast facB estimate df non-centrality alpha     power #> 1 facA1 - facA2    1       -9 27        45.0000  0.05 0.9999965 #> 2 facA1 - facA2    2      -16 27       142.2222  0.05 1.0000000"}]
