[{"path":"https://an-ethz.github.io/pwr4exp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 pwr4exp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"foundational-concepts","dir":"Articles","previous_headings":"","what":"Foundational Concepts","title":"pwr4exp: Power Analysis for Experimental Designs","text":"pwr4exp R package offers functionality power analysis. package developed based linear mixed model (LMM) theory, offering tailored functions standard experimental designs animal science beyond. current version yet support non-normal response variables, encountered generalized LMM. Linear mixed model powerful tool analyzing data various experimental designs, especially accounting fixed random effects. general form LMM can expressed : y=Xβ+Zu+ε y = X\\beta + Zu + \\varepsilon : yy represents observations response variable, β\\beta represents fixed effect coefficients, uu denotes random effects, u∼Nq(0,G)u \\sim N_q(0, G), ε\\varepsilon represents random errors, ε∼Nn(0,R)\\varepsilon \\sim N_n(0, R), X(n×p)X_{(n \\times p)} Z(n×q)Z_{(n \\times q)} design matrices fixed random effects, respectively. assumed uu ε\\varepsilon independent, marginal distribution yy follows normal distribution y∼Nn(Xβ,V)y \\sim N_n(X\\beta, V), : V=ZGZT+R V = ZGZ^T + R","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"inference-on-treatment-effects","dir":"Articles","previous_headings":"Foundational Concepts","what":"Inference on Treatment Effects","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Inference treatment effects often involves testing omnibus hypotheses contrasts. can formulated using general linear hypothesis: H0:K′β=0 H_0: K'\\beta = 0 K′K' contrast matrix. variance-covariance parameters GG RR known, estimate β\\beta : β̂=(XTV−1X)−1XTV−1y \\hat{\\beta} = (X^TV^{-1}X)^{-1}X^TV^{-1}y variance : C=(XTV−1X)−1 C = (X^TV^{-1}X)^{-1} sampling distribution K′β̂K'\\hat{\\beta} : K′β̂∼N(0,K′CK) K'\\hat{\\beta} \\sim N(0, K'CK) However, practical situations, matrices GG RR unknown must estimated using methods like Maximum Likelihood (ML) Restricted ML (REML). estimate β\\beta obtained plugging estimated covariance matrices V̂\\hat{V}, : V̂=ZĜZT+R̂ \\hat{V} = Z\\hat{G}Z^T + \\hat{R} resulting estimate β\\beta : β̂=(XTV̂−1X)−1XTV̂−1y \\hat{\\beta} = (X^T\\hat{V}^{-1}X)^{-1}X^T\\hat{V}^{-1}y estimated variance : Ĉ=(XTV̂−1X)−1 \\hat{C} = (X^T\\hat{V}^{-1}X)^{-1} testing null hypothesis H0:K′β=0H_0: K'\\beta = 0, approximate F-statistic used. F-statistic given : F=(K′β̂)′[K′ĈK′]−1(K′β̂)rank(K) F = \\frac{(K'\\hat{\\beta})' [K'\\hat{C}K']^{-1} (K'\\hat{\\beta})}{\\text{rank}(K)} FF follows approximate F-distribution F(v1,v2)F(v_1, v_2) H0H_0, v1=rank(K)≥1v_1 = \\text{rank}(K) \\geq 1 represents numerator degrees freedom (df), v2v_2 denominator df. rank(K)=1\\text{rank}(K) = 1, F-statistic simplifies square t-statistic: F=t2 F = t^2 t=K′β̂K′ĈKt = \\frac{K'\\hat{\\beta}}{\\sqrt{K'\\hat{C}K}} v2v_2 df. balanced designs, data analyzed using variance components model—commonly applied experimental animal research—v2v_2​ can precisely determined degrees freedom decomposition, applied analysis variance (ANOVA): v2=n−1−[rank(X)−1]−[rank(Z)−1] v_2 = n - 1 - [\\text{rank}(X) - 1] - [\\text{rank}(Z) - 1] However, general cases, unbalanced designs models correlated random intercept slope effects, v2v_2 must approximated using methods like Satterthwaite’s approximation (Fai Cornelius, 1996) Kenward-Roger’s method (Kenward Roger, 1997), implemented lmerTest package.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"power-calculation-under-the-alternative-hypothesis","dir":"Articles","previous_headings":"Foundational Concepts","what":"Power Calculation Under the Alternative Hypothesis","title":"pwr4exp: Power Analysis for Experimental Designs","text":"alternative hypothesis HA:K′β≠0H_A: K'\\beta \\neq 0, F-statistic follows non-central distribution F(v1,v2,ϕ)F(v_1, v_2, \\phi), ϕ\\phi non-centrality parameter measures departure null hypothesis H0H_0. non-centrality parameter ϕ\\phi given : ϕ=(K′β̂)′[K′ĈK′]−1(K′β̂) \\phi = (K'\\hat{\\beta})' [K'\\hat{C}K']^{-1} (K'\\hat{\\beta}) distribution F-statistic HAH_A known, power test can calculated conditional probability rejecting H0H_0 HAH_A true: Power=P(reject H0:F>Fcrit∣HA) \\text{Power} = P(\\text{reject } H_0: F > F_{\\text{crit}} \\mid H_A) : FcritF_{\\text{crit}} critical value F-statistic used reject H0H_0, determined P(F>Fcrit∣H0)=αP(F > F_{\\text{crit}} \\mid H_0) = \\alpha, α\\alpha type error rate. determination degrees freedom v1v_1 v2v_2, well non-centrality parameter ϕ\\phi, critical steps power calculation. Notably, ϕ\\phi resembles numerator F-statistic population parameters β\\beta, GG, RR replacing sample estimates β̂\\hat{\\beta}, Ĝ\\hat{G}, R̂\\hat{R}. Generally, power analysis requires specifying following components: Design evaluated, determines matrices XX (fixed effects) ZZ (random effects). Treatment Effects, determine β\\beta (fixed effect coefficients). Variance Components, determine GG (covariance matrix random effects) RR (covariance matrix residuals). key aspect conducting valid power analysis obtaining reasonable estimates magnitude parameters used model. includes: Treatment Effects (β\\beta): size treatment effect(s) expect detect. can obtained previous studies, pilot experiments, subject-matter expertise. Pilot studies preliminary data, can provide initial estimates variability random effects (e.g., subject--subject variability group-level variability). Literature similar experiments, variance components reported. Subject-matter expertise, researchers provide estimates based knowledge system studied. Performing power analysis unrealistic parameter magnitudes can lead incorrect conclusions, either overestimating likelihood detecting treatment effect requiring unnecessarily large sample size.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"pwr4exp: Power Analysis for Experimental Designs","text":"section provides overview package’s functionality. pwr4exp package designed streamline statistical power calculations simple, user-friendly pipeline. Performing power analysis pwr4exp involves two steps: creating design object calculating power determining sample size.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"step1-creating-a-design-object","dir":"Articles","previous_headings":"Getting Started","what":"Step1: Creating a Design Object","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Design objects pwr4exp can created using functions generate several standard experimental designs available package. functions include: designCRD(treatments, label, replicates, formula, beta, sigma2): completely randomized design (CRD). designRCBD(treatments, label, blocks, formula, beta, VarCov, sigma2, ...): randomized complete block design (RCBD). designLSD(treatments, label, squares, reuse, formula, beta, VarCov, sigma2, ...): Latin square design (LSD). designCOD(treatments, label, squares, formula, beta, VarCov, sigma2, ...): crossover design (COD), special case LSD time periods individuals blocks. Period blocks reused replicating squares. designSPD(trt.main, trt.sub, label, replicates, formula, beta, VarCov, sigma2, ...): split-plot design (SPD).","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"arguments","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object","what":"Arguments","title":"pwr4exp: Power Analysis for Experimental Designs","text":"arguments functions fall following main categories:","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"treatment-structure","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object > Arguments","what":"Treatment structure","title":"pwr4exp: Power Analysis for Experimental Designs","text":"arguments treatments, trt.main, trt.sub used specify treatment structure. designs SPD, treatments defines structure, whereas SPD, trt.main trt.sub refer main plot subplot levels, respectively. treatment structure specified integer-valued vector, length vector represents number treatment factors, value indicates number levels factor. maximum two factors allowed (SPD, applies main plot subplot levels), arranged factorial design. instance, treatments = 2 defines experiment involving two treatments (e.g., control vs. intervention). two factors, treatments = c(2, 2) sets “2x2” factorial design study main effects interactions. case SPD, trt.main = 2 specifies two levels main plot factor, trt.sub = c(2, 2) defines “2x2” factorial design subplot level.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"label","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object > Arguments","what":"Label","title":"pwr4exp: Power Analysis for Experimental Designs","text":"optional label argument list character vectors specifies names treatment factors corresponding levels. vector list represents treatment factor, name vector defines name factor, values vector labels levels factor. label argument provided, default names assigned factors levels. one treatment factor, default list(trt = c(\"1\", \"2\", ...)). two factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), “facA” “facB” represent two factors, “1”, “2”, etc., represent levels factor. example, list(trt = c(\"ad libitum\", \"fasting\")) customizes levels single treatment factor “ad libitum” “fasting.” multiple factors, list(feed = c(\"ad libitum\", \"fasting\"), dosage = c(\"D0\", \"D1\", \"D2\")) names first factor “feed” levels “ad libitum” “fasting,” second factor “dosage” levels “D0,” “D1,” “D2.”","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"replication","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object > Arguments","what":"Replication","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Given distinct randomization replication mechanisms across designs, arguments replicates, blocks, squares used represent replication indicate sample size different designs: argument replicates specifies number experimental units per treatment CRD number main plots (.e., number experimental units per treatment main plot level) SPD. blocks specifies number blocks RCBD. squares specifies number squares replicated LSD COD. CRD, setting replicates = 10 treatments = 4 (treatments = c(2, 2)) means treatment group consists 10 experimental units, resulting total 40 experimental units. configuring SPD, replicates = 10 trt.main = 4 (trt.main = c(2, 2)) signifies main plot treatment replicated across 10 experimental units, totaling 40 main plots. RCBD, using blocks = 10 along treatments = 4 (treatments = c(2, 2)) ensures four treatments replicated across 10 different blocks, leading total 40 experimental units. LSD, setting squares = 3 treatments = 4 (treatments = c(2, 2)) implies replication single “4×4” square layout 3 times, resulting total 48 experimental units.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"model","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object > Arguments","what":"Model","title":"pwr4exp: Power Analysis for Experimental Designs","text":"formula argument specifies model formula used test effects post-experimental data analysis. formula follows syntax used R’s lm function (linear models) lmer function (linear mixed models) specify fixed random effects. design-generating function within package comes default model formula. default formula incorporates interaction terms two treatment factors present fits blocking factors random effects applicable. can inspect default formula generated design object using design$formula, checking function’s documentation (?function). example, SPD one treatment factor main plot level two factors subplot level, default model formula : y ~ trt.main * facA.sub * facB.sub + (1 | mainplot). formula tests interactions, including three-way interactions. interaction main plot subplot factors assumed, model formula can specify model : y ~ trt.main + facA.sub * facB.sub + (1 | mainplot) user. Notably, specifying model formula manually, names treatment factors must consistent provided label argument.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"effect-size","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object > Arguments","what":"Effect Size","title":"pwr4exp: Power Analysis for Experimental Designs","text":"beta argument numeric vector expected model coefficients, representing effect sizes. first element corresponds intercept term, represents mean reference level categorical variables. Subsequent elements correspond effect sizes independent variables order appear model matrix. categorical variables, coefficient represents difference non-reference level reference level (intercept), contr.treatment contrast coding used construct model matrix. important ensure beta vector aligns columns model matrix, including dummy variables created categorical predictors. values can either specified directly transformed group means. example, consider factor 2 levels (treatments = 2), representing control vs. intervention (label = list(trt = c(\"control\", \"intervention\"))). beta = c(10, 5), indicates mean control group 10, effect intervention 5 units higher control. another example, consider “2 × 2” factorial arrangement (treatments = c(2, 2) & label= list(= c(\"A1\", \"A2\"), B = c(\"B1\", \"B2\"))): B1B2A1106A2812 \\begin{array}{c|c|c}   & B1 & B2 \\\\ \\hline A1 & 10 & 6 \\\\ A2 & 8  & 12 \\\\ \\end{array} beta argument specified beta = c(10, -2, -4, 8), represents following effects: mean reference level (A1B1) 10. effect A2 alone -2 (.e., A2B1 - A1B1). effect B2 alone -4 (.e., A1B2 - A1B1). interaction A2 B2 8, representing additional effect combining A2 B2 compared expected sum individual effects (A2B2 - A2B1 - A1B2 + A1B1).","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"variance-covariance","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object > Arguments","what":"Variance-Covariance","title":"pwr4exp: Power Analysis for Experimental Designs","text":"VarCov argument specifies variance-covariance components random effects. multiple terms exist single random effect group, variance-covariance matrix provided. example, covariance matrix random intercepts random slopes single grouping factor structured : (τ02τ12τ12τ12) \\begin{pmatrix} \\tau_0^2 & \\tau_{12} \\\\ \\tau_{12} & \\tau_1^2 \\end{pmatrix} τ02\\tau_0^2 represents variance random intercept, τ12\\tau_1^2 represents variance random slope, τ12\\tau_{12} covariance . multiple random effect groups, supply variance (single random effect term) variance-covariance matrix (two random effect terms) group list, following order specified model formula. standard designs available pwr4exp, corresponding LMMs typically variance component models, .e., models without random slopes. example, RCBD block random effect, required input variance blocks: VarCov = \\tau_b^2. multiple random effects, example, LSD row column blocks random effects, required input VarCov = list(\\tau_r^2, \\tau_c^2), representing variances row column blocks, respectively.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"error-variance","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object > Arguments","what":"Error Variance","title":"pwr4exp: Power Analysis for Experimental Designs","text":"sigma2 argument represents variance random error model. value specifies error variance, captures unexplained variability within model accounted fixed random effects. important parameter determining power.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"customized-design","dir":"Articles","previous_headings":"Getting Started > Step1: Creating a Design Object","what":"Customized design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"designCustom(design.df, formula, beta, VarCov, sigma2, design.name, ...) design predefined package, can constructed using designCustom function. required inputs design.df, formula, beta, VarCov, sigma2, optionally, design.name. arguments defined , except design.df, refers data frame containing columns independent variables, outlining structure data collected experiment. Note data frame include response variable. design.name argument allows specifying custom name design, desired.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"step2-calculating-power-or-sample-size","dir":"Articles","previous_headings":"Getting Started","what":"Step2: Calculating Power or Sample Size","title":"pwr4exp: Power Analysis for Experimental Designs","text":"design object created, calculating power sample size straightforward. Power omnibus tests, including main effects interactions (specified model creation design object), can calculated using: pwr.anova(design, alpha = 0.05, ...) required inputs include: design, object created Step 1; alpha, indicating Type error rate, default value 0.05. specific contrasts, power can calculated using: pwr.contrast(design, alpha = 0.05, spec, method, ...) syntax emmeans package inherited specify contrasts interest. required inputs : design; alpha; spec, argument inherited emmeans, specifies names factors contrasts performed. method, another argument inherited emmeans, specifies method contrasts (e.g., “pairwise”, “trt.vs.ctrl”, “poly”). minimal sample size needed achieve target power can determined using: find_sample_size(design.quote, alpha = 0.05, target.power = 0.8, n_init = 2, n_max = 99) function calculates minimum sample size necessary incrementally checking integers n_init n_max. required inputs : design.quote: quoted design object unknown unevaluated replication argument, evaluated varying values; alpha; target.power: single value specifying target power effects, vector specifying individual target power levels effect, default value 0.05; n_init: initial number replications iterative process, default value 2; n_max: maximum number replications iterative process, default value 99. Currently, sample size determination available omnibus tests specific contrasts pwr4exp.","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-1--completely-randomized-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 1. Completely Randomized Design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create CRD one treatment factor. design parameters follows: Treatments: 1 treatment factor 4 levels; Replicates: 8 experimental units per treatment. Mean effect size: mean control 35, effects three treatments -5, +2, +3. Error variance: variance response variable 15. Create CRD Power omnibus test power omnibus test (.e., F-test) can calculated using pwr.anova function. type error rate 0.05, power testing overall difference among treatments 0.95467. Power specific contrasts assess power specific contrasts, use pwr.contrast function. example, calculate power detecting differences treatments control: calculate power detecting linear polynomial trends across treatment levels:","code":"crd <- designCRD(   treatments = 4,   replicates = 8,   beta = c(35, -5, 2, 3),   sigma2 = 15 ) pwr.anova(design = crd) #> Power analysis of Completely Randomized Design #>     NumDF DenDF non-centrality alpha   power #> trt     3    28         20.267  0.05 0.95467 pwr.contrast(design = crd, specs =  ~ trt, method = \"trt.vs.ctrl\") #>      contrast estimate df non-centrality alpha     power #> 1 trt2 - trt1       -5 28       6.666667  0.05 0.7028739 #> 2 trt3 - trt1        2 28       1.066667  0.05 0.1694975 #> 3 trt4 - trt1        3 28       2.400000  0.05 0.3216803 pwr.contrast(design = crd, specs =  ~ trt, method = \"poly\") #>    contrast estimate df non-centrality alpha     power #> 1    linear       16 28       6.826667  0.05 0.7130735 #> 2 quadratic        6 28       4.800000  0.05 0.5617849 #> 3     cubic      -18 28       8.640000  0.05 0.8098383"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-2--randomized-complete-block-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 2. Randomized Complete Block Design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create RCBD two treatment factors. design parameters follows: Treatments: 2x2 factorial design. Replicates: 8 blocks. Mean effect size: mean control (A1B1) 35. effect A2 alone increase 5 units, effect B2 alone increase 3 units. interaction A2 B2 introduces additional effect -2 units, meaning combined effect A2 B2 2 units sum individual effects. corresponding cell means :B1B2A13538A24041 \\begin{array}{c|c|c}   & B1 & B2 \\\\ \\hline A1 & 35 & 38 \\\\ A2 & 40  & 41 \\\\ \\end{array} Variance among blocks: 11. Error variance: 4. total variance response variable (15) decomposed variance blocks (11) variance within blocks (4). Create RCBD Power omnibus test Power specific contrasts power detecting effect facA, overall within level facB, can assessed follows: Sample Size Determination determine number blocks required achieve target power, find_sample_size function can used. First, create quoted design object blocks = n remains unevaluated: optimal sample size target power within range n_init n_max can determined follows:","code":"rcbd <- designRCBD(   treatments = c(2, 2),   blocks = 8,   beta = c(35, 5, 3, -2),   VarCov = 11,   sigma2 = 4 ) pwr.anova(design = rcbd) #> Power Analysis of Randomized Complete Block Design #>           NumDF DenDF non-centrality alpha   power #> facA          1    21             32  0.05 0.99969 #> facB          1    21              8  0.05 0.76950 #> facA:facB     1    21              2  0.05 0.27138 # across all levels of facB pwr.contrast(design = rcbd, specs = ~ \"facA\", method = \"pairwise\") #> NOTE: Results may be misleading due to involvement in interactions #>        contrast estimate df non-centrality alpha    power #> 1 facA1 - facA2       -4 21             32  0.05 0.999691 # at each level of facB pwr.contrast(design = rcbd, specs = ~ facA|facB, method = \"pairwise\") #>        contrast facB estimate df non-centrality alpha     power #> 1 facA1 - facA2    1       -5 21             25  0.05 0.9974502 #> 2 facA1 - facA2    2       -3 21              9  0.05 0.8160596 rcbd_quote <- quote(   designRCBD(   treatments = c(2, 2),   blocks = n,   beta = c(35, 5, 3, -2),   VarCov = 11,   sigma2 = 4   ) ) find_sample_size(design.quote = rcbd_quote, n_init = 2, n_max = 99) #>           alpha     power best_n #> facA       0.05 0.8212779      3 #> facB       0.05 0.8207219      9 #> facA:facB  0.05 0.8115100     33"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-3--latin-square-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 3. Latin Square Design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, extend design Example 2 introducing another blocking factor, thus creating LSD. treatment structure effect sizes remain Example 2. design controls two sources variability (row column blocks) evaluating treatment effects. LSD, total variance (15) decomposed three components: Variance row blocks (11), Variance column blocks (2), Residual error variance (2). example, customize labels two factors follows: “temp” levels “T1” “T2”, “dosage” levels “D1” “D2”. Create LSD Power omnibus test Power specific contrasts power detecting effect dosage, overall within level temp, can assessed follows: Sample Size Determination determine number squares required achieve target power, find_sample_size function can used. First, create quoted design object squares = n remains unevaluated: optimal sample size target power within range n_init n_max can determined follows:","code":"lsd <- designLSD(   treatments = c(2, 2),   label = list(temp = c(\"T1\", \"T2\"), dosage = c(\"D1\", \"D2\")),   squares = 4,   reuse = \"both\",   beta = c(35, 5, 3, -2),   VarCov = list(11, 2),   sigma2 = 2 ) pwr.anova(design = lsd) #> Power Analysis of Latin Square Design #>             NumDF DenDF non-centrality alpha   power #> temp            1    33            128  0.05 1.00000 #> dosage          1    33             32  0.05 0.99979 #> temp:dosage     1    33              8  0.05 0.78387 # the effect of dosage across all levels of temp pwr.contrast(design = lsd, specs = ~ \"dosage\", method = \"pairwise\") #> NOTE: Results may be misleading due to involvement in interactions #>   contrast estimate df non-centrality alpha     power #> 1  D1 - D2       -2 33             32  0.05 0.9997892 # the effect of dosage at each level of temp pwr.contrast(design = lsd, specs = ~ dosage|temp, method = \"pairwise\") #>   contrast temp estimate df non-centrality alpha     power #> 1  D1 - D2   T1       -3 33             36  0.05 0.9999429 #> 2  D1 - D2   T2       -1 33              4  0.05 0.4927485 lsd_quote <- quote(   designLSD(   treatments = c(2, 2),   squares = n,   reuse = \"both\",   beta = c(35, 5, 3, -2),   VarCov = list(11, 2),   sigma2 = 2   ) ) find_sample_size(design.quote = lsd_quote, n_init = 2, n_max = 99) #>           alpha     power best_n #> facA       0.05 1.0000000      2 #> facB       0.05 0.9618851      2 #> facA:facB  0.05 0.8705999      5"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-4-split-plot-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 4: Split-plot Design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create SPD two treatment factors, one level. design parameters follows: Treatments: One main plot factor 2 levels, another factor 3 levels sub-plot level. Label: two treatment factors labeled “Main” levels “Main1” “Main2,” “Sub” levels “Sub1” “Sub2,” corresponding main plot subplot, respectively. Replicates: 10 main plots, 5 main plots per “Main” treatment level, resulting 10 experimental units (blocks) “Sub” treatment level. mean control (Main1 Sub1) 20. effect Main2 alone increase 2 units. effects Sub2 Sub3 alone increases 2 4 units, respectively. interaction Main2 Sub2 zero. interaction Main2 Sub3 introduces additional effect 2 units, meaning combined effect Main2 Sub3 2 units sum individual effects. corresponding cell means :Sub1Sub2Sub3Main1202224Main2222428 \\begin{array}{c|c|c}   & Sub1 & Sub2 & Sub3 \\\\ \\hline Main1 & 20 & 22 & 24\\\\ Main2 & 22 & 24 & 28 \\\\ \\end{array} total variance (15) assumed decompose 4 whole-plot error 11 subplot error. Create SPD Power omnibus test Power specific contrasts power detecting effect subplot treatment level main plot treatment, can assessed follows:","code":"spd <- designSPD(   trt.main = 2,   trt.sub = 3,    replicates = 10,    label = list(Main = c(\"Main1\", \"Main2\"), Sub = c(\"Sub1\", \"Sub2\", \"Sub3\")),   beta = c(20, 2, 2, 4, 0, 2),   VarCov = list(4),   sigma2 = 11 ) pwr.anova(spd) #> Power Analysis of Split Plot Design #>          NumDF DenDF non-centrality alpha   power #> Main         1    18         4.6377  0.05 0.53114 #> Sub          2    36        23.0303  0.05 0.98924 #> Main:Sub     2    36         1.2121  0.05 0.14311 pwr.contrast(design = spd, specs = ~ Sub|Main, method = \"trt.vs.ctrl\") #>      contrast  Main estimate df non-centrality alpha     power #> 1 Sub2 - Sub1 Main1        2 36       1.818182  0.05 0.2592167 #> 2 Sub3 - Sub1 Main1        4 36       7.272727  0.05 0.7467531 #> 3 Sub2 - Sub1 Main2        2 36       1.818182  0.05 0.2592167 #> 4 Sub3 - Sub1 Main2        6 36      16.363636  0.05 0.9758744"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-5-a-customized-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 5: A customized design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create COD arranged “subplot” level split-plot layout. Sixteen subjects, split evenly two breeds (8 subjects per breed), enrolled 4x4 crossover design. Within breed, subjects divided two squares (total four squares), square consisting four subjects. subject follows one four treatment sequences receives treatments across four periods. hybrid SPD-COD combines elements SPD COD evaluate treatment effects across different breeds. Latin Square structure ensures within square, treatments balanced across periods, split-plot element accounts breed whole-plot factor. overall structure follows: Treatment structure Whole-plot level: Breed (2 breeds, 8 subjects breed) Sub-plot level: 2x2 factorial design two treatment factors, facA facB. Experimental units Whole-plot factor: Subjects (randomly selected two breeds) Sub-plot factor: Measurements taken subjects period. Variance decomposition overall variance (15) decomposed three main components: subject variance (7), period variance (4), random error (4). Construct design data frame create design object hybrid SPD-COD, first need construct data frame containing independent variables, structured resemble actual experimental data. data frame can generated using internal function df.cod, builds data frame COD specified treatment structure number replications. base data frame generated, column “Breed” variable manually added. important note randomization occurs stage—data frame simply represents data structure actual randomized experimental data. purpose create design layout. Specify model formula Next, appropriate model formula must specified fit experimental design. formula captures interactions breed, two treatment factors (facA facB), random effects subjects periods. Fixed effects specify fixed effects model, beta contains baseline intercept effects factor interactions. Create design object constructing data frame, model formula, fixed effects, design object can created using designCustom function. variance-covariance structure error variance also provided complete design. Power omnibus test Power specific contrasts can also calculate power specific contrasts. example, assess power detecting differences facA1 facA2 level facB within breed:","code":"df_spd_cod <- pwr4exp:::df.cod(   treatments = c(2, 2),   squares = 4 ) ## Create main plot factor, i.e., breed df_spd_cod$Breed <- rep(c(\"1\", \"2\"), each = 32)  ## Check data structure head(df_spd_cod, n = 4); tail(df_spd_cod, n = 4) #>   subject period trt facA facB square Breed #> 1       1      1   2    2    1      1     1 #> 2       2      1   3    1    2      1     1 #> 3       3      1   4    2    2      1     1 #> 4       4      1   1    1    1      1     1 #>    subject period trt facA facB square Breed #> 61      13      4   1    1    1      4     2 #> 62      14      4   2    2    1      4     2 #> 63      15      4   3    1    2      4     2 #> 64      16      4   4    2    2      4     2 formula <- y ~ Breed*facA*facB + (1|subject) + (1|period) beta = c(   `(Intercept)` = 35,        # Baseline (mean of Breed1_A1_B1)   Breed2 = -5,           # Effect of the second breed alone   facA2 = -5,               # Effect of A2 alone   facB2 = 1,                # Effect of B2 alone   `Breed2:facA2` = 1,         # Interaction between Breed2 and A2   `Breed2:facB2` = 0,         # Interaction between Breed2 and B2   `facA2:facB2` = 2,             # Interaction between A2 and B2   `Breed2:facA2:facB2` = 1       # Three-way interaction between Breed2, A2, and B2 ) SPD_COD <- designCustom(   design.df = df_spd_cod,   formula = formula,   beta = beta,   VarCov = list(7, 4),   sigma2 = 4,   design.name = \"hybrid SPD COD\" ) pwr.anova(SPD_COD) #> Power Analysis of hybrid SPD COD #>                 NumDF DenDF non-centrality alpha   power #> Breed               1    14          9.031  0.05 0.79790 #> facA                1    39         42.250  0.05 0.99999 #> facB                1    39         20.250  0.05 0.99238 #> Breed:facA          1    39          2.250  0.05 0.30997 #> Breed:facB          1    39          0.250  0.05 0.07768 #> facA:facB           1    39          6.250  0.05 0.68372 #> Breed:facA:facB     1    39          0.250  0.05 0.07768 pwr.contrast(SPD_COD, ~facA|facB|Breed, \"pairwise\") #>        contrast facB Breed estimate df non-centrality alpha     power #> 1 facA1 - facA2    1     1        5 39             25  0.05 0.9982139 #> 2 facA1 - facA2    2     1        3 39              9  0.05 0.8328312 #> 3 facA1 - facA2    1     2        4 39             16  0.05 0.9737940 #> 4 facA1 - facA2    2     2        1 39              1  0.05 0.1641134"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Hrong-Tai Fai, ., & Cornelius, P. L. (1996). Approximate F-tests multiple degree freedom hypotheses generalized least squares analyses unbalanced split-plot experiments. Journal statistical computation simulation, 54(4), 363-378. Kenward, M. G., & Roger, J. H. (1997). Small sample inference fixed effects restricted maximum likelihood. Biometrics, 983-997.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"pwr4exp: Power Analysis for Experimental Designs","text":"development pwr4exp benefited greatly several R packages. Specifically, leverages modifies critical functionality lmerTest, car, emmeans determine degrees freedom (v1v_1 v2v_2) non-centrality parameter (ϕ\\phi), making power analysis accessible efficient. particularly grateful authors contributors packages, well broader R community valuable tools resources.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Wang. Author, maintainer, copyright holder. Mutian Niu. Author, copyright holder.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang K, Arshad U, Niu M (2024). “Enhancing quality dairy cattle research adequate power analysis.” agriRxiv. doi:10.31220/agriRxiv.2024.00278, Preprint.","code":"@Article{,   title = {Enhancing quality of dairy cattle research through adequate power analysis},   author = {Kai Wang and Usman Arshad and Mutian Niu},   journal = {agriRxiv},   year = {2024},   doi = {10.31220/agriRxiv.2024.00278},   publisher = {CABI},   note = {Preprint}, }"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"pwr4exp","dir":"","previous_headings":"","what":"Power Analysis for Research Experiments","title":"Power Analysis for Research Experiments","text":"pwr4exp R package provides functions power calculation sample size determination standard experimental designs animal science beyond. package emphasizes importance specifying models conducting power analyses supports power analyses main effects, interactions, specific contrasts. Additionally, pwr4exp offers flexible framework perform power analysis customized designs currently predefined package.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power Analysis for Research Experiments","text":"","code":"# You can install pwr4exp from CRAN install.packages(\"pwr4exp\")  # Or the the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"an-ethz/pwr4exp\")"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Power Analysis for Research Experiments","text":"Performing power analysis pwr4exp involves following steps: - First, create design object using design generating functions. - design object created, calculating power determining sample size using pwr4exp straightforward. Simply pass design object power calculator main effects interactions, pwr.anova(), contrasts, pwr.contrast(). - determine minimal sample size achieve target power, quoted design object can passed function find_sample_size().","code":""},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"example-usage","dir":"","previous_headings":"Functions","what":"Example Usage","title":"Power Analysis for Research Experiments","text":"’s example can generate design calculate power:","code":"library(pwr4exp) # Create a design rcbd <- designRCBD(   treatments = c(2, 2),   blocks = 10,   beta = c(470, 30, -55, 5),   VarCov = 3200,   sigma2 = 3200 ) # Calculate power for the ominubus test (i.e., F-test) pwr.anova(design = rcbd)  # Calculate power for specific contrasts pwr.contrast(design = rcbd, specs = ~ facB | facA, contrast = \"pairwise\")"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"Power Analysis for Research Experiments","text":"learn pwr4exp, read vignette pwr4exp contains: Foundational Concepts. Instructions providing required inputs. Examples conducting power analysis standard designs available package. Examples using pwr4exp assess power customized designs. documentation package updated. questions suggestions, please feel free contact package maintainer.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/calc.theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance covariance parameters — calc.theta","title":"Calculate variance covariance parameters — calc.theta","text":"Scale variance-covariance matrices relative Cholesky factors random effect term.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/calc.theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance covariance parameters — calc.theta","text":"","code":"calc.theta(VarCov, sigma)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/calc.theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance covariance parameters — calc.theta","text":"VarCov variance-covariance matrices. multiple random effect groups, supply variance-covariance matrix group element list. sigma standard deviation random errors.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/calc.theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variance covariance parameters — calc.theta","text":"theta","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of Experimental Designs — designCRD","title":"Creation of Experimental Designs — designCRD","text":"functions used create design objects evaluation statistical power.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of Experimental Designs — designCRD","text":"","code":"designCRD(treatments, label, replicates, formula, beta, sigma2)  designRCBD(treatments, label, blocks, formula, beta, VarCov, sigma2, ...)  designLSD(   treatments,   label,   squares = 1,   reuse = c(\"row\", \"col\", \"both\"),   formula,   beta,   VarCov,   sigma2,   ... )  designCOD(treatments, label, squares = 1, formula, beta, VarCov, sigma2, ...)  designSPD(   trt.main,   trt.sub,   label,   replicates,   formula,   beta,   VarCov,   sigma2,   ... )  designCustom(design.df, formula, beta, VarCov, sigma2, design.name, ...)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of Experimental Designs — designCRD","text":"treatments integer-valued vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. maximum two factors allowed, arranged factorial design. instance, treatments = n specifies one treatment factor n levels, treatments=c(2,3) creates \"2x3\" factorial design two treatment factors 2 3 levels, respectively. label Optional. list character vectors specifying names treatment factors factor levels. vector list represents treatment factor, name vector specifies name factor, values vector labels factor's levels. provided, factors levels one two treatment factors labeled list(trt = c(\"1\", \"2\", ...)) list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), respectively. replicates number experimental units per treatment completely randomized design number experimental units (main plots) per treatment main plot factors. formula model formula testing treatment effects post-experimental data analysis. Use syntax lm fixed effects lmer random effects. response variable always denoted y. default, interaction terms treatment factors included formula. beta numeric vector expected model coefficients, representing effect sizes. first element represents intercept term, corresponding mean reference level categorical variables. Subsequent elements correspond effect sizes independent variables order appear model matrix. categorical variables, coefficient represents difference non-reference level reference level (intercept), contr.treatment contrast coding used constructing model matrix. Ensure beta aligns columns model matrix, including dummy variables created categorical predictors. sigma2 error variance. blocks number blocks. VarCov Variance-covariance components random effects. multiple random effect groups, supply variance (single random effect term) variance-covariance matrix (two random effect terms) group list, following order model formula. ... Additional arguments passed anova function lmerTest. type ANOVA table (default Type III) method computing denominator degrees freedom (default Satterthwaite's method) can modified. balanced designs, choice sum squares (SS) degrees freedom (df) affect results. squares number replicated squares. default, 1, .e., replicated squares. reuse character string specifying replicate squares multiple squares. Options : \"row\" reusing row blocks, \"col\" reusing column blocks, \"\" reusing row column blocks replicate single square. trt.main integer-valued vector specifying treatment structure main plot level split plot design, similar treatments. trt.sub integer-valued vector specifying treatment structure sub plot level split plot design, similar treatments. design.df Required input creating customized design. data frame independent variables design columns, representing actual data structure (long format data frame) without response variables. design.name Optional input creating customized design. character.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of Experimental Designs — designCRD","text":"list design name, data structure (data frame), model formula, pseudo model object expected fixed random effects.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creation of Experimental Designs — designCRD","text":"function creates specific design described : designCRD Completely Randomized Design. default, model formula y ~ trt one factor y ~ facA*facB two factors, unless explicitly specified. label argument provided, formula automatically updated specified treatment factor names. designRCBD Randomized Complete Block Design. default model formula y ~ trt + (1|block) one factor y ~ facA*facB + (1|block) two factors. label provided, fixed effect parts formula automatically updated specified names. label block factor (\"block\") formula changeable. designLSD Latin Square Design. default formula y ~ trt + (1|row) + (1|col) one factor y ~ facA*facB + (1|row) + (1|col) two factors. label provided, fixed effect parts formula automatically updated specified names. labels row (\"row\") column (\"col\") block factors changeable. designCOD Crossover Design, special case LSD time periods individuals blocks. Period blocks reused replicating squares. default formula y ~ trt + (1|subject) + (1|period) one factor y ~ facA*facB + (1|subject) + (1|period) two factors. label provided, fixed effect parts formula automatically updated specified names. Note \"subject\" \"period\" labels two blocking factors changed. designSPD Split Plot Design. default formula includes main effects treatment factors main sub-plot levels, interactions, random effects main plots: y ~ . + (1|mainplot). label provided, fixed effect parts formula automatically updated specified names. experimental unit main plot level (.e., block factor subplot level) always denoted \"mainplot\". designCustom Customized Design.","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of Experimental Designs — designCRD","text":"","code":"# Example 1: Evaluate the power of a CRD with one treatment factor  ## Create a design object  crd <- designCRD(   treatments = 4, # 4 levels of one treatment factor   replicates = 12, # 12 units per level, 48 units totally   # mean of level1, and the means of other levels minus level1, respectively   beta = c(30, -2, 3, 5),   sigma2 = 10 # error variance )  ## power of omnibus test pwr.anova(crd) #> Power analysis of Completely Randomized Design #>     NumDF DenDF non-centrality alpha power #> trt     3    44           34.8  0.05 0.999  ## power of contrast pwr.contrast(crd, specs = \"trt\", method = \"pairwise\") # pairwise comparisons #>      contrast estimate df non-centrality alpha     power #> 1 trt1 - trt2        2 44            2.4  0.05 0.3285822 #> 2 trt1 - trt3       -3 44            5.4  0.05 0.6228308 #> 3 trt1 - trt4       -5 44           15.0  0.05 0.9661638 #> 4 trt2 - trt3       -5 44           15.0  0.05 0.9661638 #> 5 trt2 - trt4       -7 44           29.4  0.05 0.9995822 #> 6 trt3 - trt4       -2 44            2.4  0.05 0.3285822 pwr.contrast(crd, specs = \"trt\", method = \"poly\") # polynomial contrasts #>    contrast estimate df non-centrality alpha     power #> 1    linear       20 44           24.0  0.05 0.9976700 #> 2 quadratic        4 44            4.8  0.05 0.5726028 #> 3     cubic      -10 44            6.0  0.05 0.6685119  # Example 2: Evaluate the power of an RCBD with 2 x 2 factorial treatments  # Treatment factors are A (A1 vs. A2) and B (B1 vs. B2). # To illustrate how to provide `beta`, treatment means are presented: #     B1  B2 # A1  20  24 # A2  17  22 # # From these means, we calculate: # 1. the mean of reference level (A1B1): 20 # 2. the effect of A2 alone: Effect_A2 = A2B1 - A1B1 = 17 - 20 = -3 # 3. the effect of B2 alone: Effect_A2 = A1B2 - A1B1 = 24 - 20 = 4 # 4. the interaction effect of A2 and B2: #    Interaction_A2B2 = A2B2 - A2B1 - A1B2 + A1B1 = 22 - 17 - 24 + 20 = 1, representing #    the additional effect of combining A2B2 compared to what would be expected #    from the sum of individual effects of A2 and B2.  # The `beta` vector is constructed as: # beta = c(mean_A1B1, Effect_A2, Effect_B2, Interaction_A2B2) # beta = c(20, -3, 4, 1)  ## Create a design object  rcbd <- designRCBD(   # 2x2 factorial design   treatments = c(2, 2),   # Specify treatment names   label = list(A = c(\"A1\", \"A2\"), B = c(\"B1\", \"B2\")),   # 12 blocks, totaling 48 experimental units   blocks = 12,   # Mean of the reference level and effect sizes as calculated above   beta = c(20, -3, 4, 1),   # Variance of block effects (between-block variance)   VarCov = 30,   # Error variance (within-block variance)   sigma2 = 20 )  ## power of omnibus test  pwr.anova(rcbd) #> Power Analysis of Randomized Complete Block Design #>     NumDF DenDF non-centrality alpha   power #> A       1    33           3.75  0.05 0.46821 #> B       1    33          12.15  0.05 0.92258 #> A:B     1    33           0.15  0.05 0.06636  ## power of B2 vs. B1 at each level of A pwr.contrast(rcbd, specs = ~B|A, method = \"pairwise\") #>   contrast  A estimate df non-centrality alpha     power #> 1  B1 - B2 A1       -4 33            4.8  0.05 0.5663008 #> 2  B1 - B2 A2       -5 33            7.5  0.05 0.7574784  # More examples are available in the package vignette(\"pwr4exp\") # and on the package website: https://an-ethz.github.io/pwr4exp/"},{"path":"https://an-ethz.github.io/pwr4exp/reference/customLmerMod-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend lmerModLmerTest class — customLmerMod-class","title":"Extend lmerModLmerTest class — customLmerMod-class","text":"class extends lmerModLmerTest adding DenDF slot.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/customLmerMod-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Extend lmerModLmerTest class — customLmerMod-class","text":"DenDF Numeric vector denominator degrees freedom.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame for Crossover design — df.cod","title":"Create a data frame for Crossover design — df.cod","text":"Create data frame Crossover design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame for Crossover design — df.cod","text":"","code":"df.cod(treatments, label, squares)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame for Crossover design — df.cod","text":"treatments integer-valued vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. maximum two factors allowed, arranged factorial design. instance, treatments = n specifies one treatment factor n levels, treatments=c(2,3) creates \"2x3\" factorial design two treatment factors 2 3 levels, respectively. label Optional. list character vectors specifying names treatment factors factor levels. vector list represents treatment factor, name vector specifies name factor, values vector labels factor's levels. provided, factors levels one two treatment factors labeled list(trt = c(\"1\", \"2\", ...)) list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), respectively. squares number replicated squares. default, 1, .e., replicated squares.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame for Crossover design — df.cod","text":"data.frame columns treatment factors, individuals (row block factor), period (column block factor), squares","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of completely randomized design — df.crd","title":"Create a data frame of completely randomized design — df.crd","text":"Create data frame completely randomized design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of completely randomized design — df.crd","text":"","code":"df.crd(treatments, label, replicates)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of completely randomized design — df.crd","text":"treatments integer-valued vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. maximum two factors allowed, arranged factorial design. instance, treatments = n specifies one treatment factor n levels, treatments=c(2,3) creates \"2x3\" factorial design two treatment factors 2 3 levels, respectively. label Optional. list character vectors specifying names treatment factors factor levels. vector list represents treatment factor, name vector specifies name factor, values vector labels factor's levels. provided, factors levels one two treatment factors labeled list(trt = c(\"1\", \"2\", ...)) list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), respectively. replicates number experimental units per treatment.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of completely randomized design — df.crd","text":"data.frame columns treatment factors replicates","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame for Latin square design — df.lsd","title":"Create a data frame for Latin square design — df.lsd","text":"Create data frame Latin square design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame for Latin square design — df.lsd","text":"","code":"df.lsd(treatments, label, squares = 1, reuse = c(\"row\", \"col\", \"both\"))"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame for Latin square design — df.lsd","text":"treatments integer-valued vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. maximum two factors allowed, arranged factorial design. instance, treatments = n specifies one treatment factor n levels, treatments=c(2,3) creates \"2x3\" factorial design two treatment factors 2 3 levels, respectively. label Optional. list character vectors specifying names treatment factors factor levels. vector list represents treatment factor, name vector specifies name factor, values vector labels factor's levels. provided, factors levels one two treatment factors labeled list(trt = c(\"1\", \"2\", ...)) list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), respectively. squares number replicated squares reuse character string specifying replicate squares multiple squares. Options : \"row\" reusing row blocks, \"col\" reusing column blocks, \"\" reusing row column blocks replicate single square.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame for Latin square design — df.lsd","text":"data.frame columns treatment factors, row column block factors, squares","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of randomized complete block design — df.rcbd","title":"Create a data frame of randomized complete block design — df.rcbd","text":"Create data frame randomized complete block design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of randomized complete block design — df.rcbd","text":"","code":"df.rcbd(treatments, label, blocks)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of randomized complete block design — df.rcbd","text":"treatments integer-valued vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. maximum two factors allowed, arranged factorial design. instance, treatments = n specifies one treatment factor n levels, treatments=c(2,3) creates \"2x3\" factorial design two treatment factors 2 3 levels, respectively. label Optional. list character vectors specifying names treatment factors factor levels. vector list represents treatment factor, name vector specifies name factor, values vector labels factor's levels. provided, factors levels one two treatment factors labeled list(trt = c(\"1\", \"2\", ...)) list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), respectively. blocks number blocks","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of randomized complete block design — df.rcbd","text":"data.frame columns blocks treatment factors","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for split-plot design — df.spd","title":"Create data frame for split-plot design — df.spd","text":"Create data frame split-plot design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for split-plot design — df.spd","text":"","code":"df.spd(trt.main, trt.sub, label, replicates)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for split-plot design — df.spd","text":"trt.main integer-valued vector specifying treatment structure main plot level, similar df.crd. trt.sub integer-valued vector specifying treatment structure sub plot level, similar trt.main. label Optional. list character vectors specifying names treatment factors factor levels. vector list represents treatment factor, name vector specifies name factor, values vector labels factor's levels. provided, factors levels one two treatment factors labeled list(trt = c(\"1\", \"2\", ...)) list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), respectively. replicates number experimental units (main plots) per treatment main plot factors.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for split-plot design — df.spd","text":"data.frame columns main plots, main treatments, sub-treatments","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/find_sample_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the sample size required to achieve the target power — find_sample_size","title":"Determine the sample size required to achieve the target power — find_sample_size","text":"function finds minimum sample size needed achieve target power given design. uses iterative approach determine minimum number replications traversing series integers.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/find_sample_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the sample size required to achieve the target power — find_sample_size","text":"","code":"find_sample_size(   design.quote,   alpha = 0.05,   target.power = 0.8,   n_init = 2,   n_max = 99,   ... )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/find_sample_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the sample size required to achieve the target power — find_sample_size","text":"design.quote quoted design object unknown unevaluated replications evaluated varying values alpha type error rate, default 0.05 target.power target power can single value factors vector containing individual values different factors, default 0.8 n_init initial replications iterative process, default 2 n_max maximum number replications iterative process, default 99 ... additional arguments passed pwr.anova","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/find_sample_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the sample size required to achieve the target power — find_sample_size","text":"data frame type error rate (alpha), realized power (power), minimum sample size (best_n).","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/find_sample_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the sample size required to achieve the target power — find_sample_size","text":"","code":"# create a LSD object with unknown replications (\\code{squares = n}) # simply \\code{\\link{quote}} the design generating function with lsd_quote <- quote(   designLSD(     treatments = 4,     squares = n,     reuse = \"row\",     beta = c(10, 2, 3, 4),     VarCov = list(5, 2),     sigma2 = 10   ) )  # find the minimum number of squares required to achieve the target power of 0.8 find_sample_size(lsd_quote) #>     alpha     power best_n #> trt  0.05 0.8635786      4"},{"path":"https://an-ethz.github.io/pwr4exp/reference/fit.pseu.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an artificial model object — fit.pseu.model","title":"Create an artificial model object — fit.pseu.model","text":"Create pseudo-model object response variable simulated according fixed random effects. Model coefficients replaced expectations specified argument beta. Variance-covariance components random effects replaced values specified argument VarCov. standard deviation random error replaced argument sigma. Creating pseudo-model facilitates power calculations leveraging anova function lmerTest Anova function car.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/fit.pseu.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an artificial model object — fit.pseu.model","text":"","code":"fit.pseu.model(formula, data, beta, VarCov, sigma, ...)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/fit.pseu.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an artificial model object — fit.pseu.model","text":"formula object class formula data data frame independent variables design columns, e.g., treatment factors block factors. beta vector expectations model coefficients. VarCov variance-covariance matrices. multiple random effect groups, supply variance-covariance matrix group element list. sigma standard deviation error ... arguments passed anova function lmerTest. type sum squares, Type III default, method computing denominator degrees freedom, Satterthwaite's method default, can changed. details, see anova.lmerModLmerTest.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/fit.pseu.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an artificial model object — fit.pseu.model","text":"pseudo model object.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":null,"dir":"Reference","previous_headings":"","what":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"Milk yield records 8 cows 4 different periods 4x4 crossover design. design includes 2 Latin squares, consisting 4 cows 4 periods.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"","code":"milk"},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"data frame 32 rows 4 variables: Cow Factor: Cow index (8 levels) Period Factor: Period index (4 levels) Treatment Factor: Treatment index (4 levels) MilkYield Numeric: milk yield recordings (kg)","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"Simulated data package demonstration purposes.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Power of omnibus test — pwr.anova","title":"Power of omnibus test — pwr.anova","text":"Calculate power testing overall effects treatment factors interactions, .e., statistical power ANOVA.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power of omnibus test — pwr.anova","text":"","code":"pwr.anova(design, alpha = 0.05, ...)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power of omnibus test — pwr.anova","text":"design design object created using design generating functions. alpha significance level (type error rate), default 0.05 ... Additional arguments passed anova.lmerModLmerTest linear mixed models Anova linear models. type sum squares (SS, default Type III) method computing denominator degrees freedom (DDF, default Satterthwaite's method) can modified. balanced designs, types SS DDF affect results. Note additional arguments consistent design-generating function pwr.anova linear mixed models.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power of omnibus test — pwr.anova","text":"data frame numerator degrees freedom (NumDF), denominator degrees freedom (DenDF), non-centrality parameter, type error rate (alpha), power.","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power of omnibus test — pwr.anova","text":"","code":"# generate an RCBD rcbd = designRCBD(treatments = c(2, 2), blocks = 10, beta = c(10, 9, 8, 7), VarCov = 10, sigma2 = 9) # power of omnibus test pwr.anova(rcbd, alpha  = 0.05) #> Power Analysis of Randomized Complete Block Design #>           NumDF DenDF non-centrality alpha   power #> facA          1    27        173.611  0.05 1.00000 #> facB          1    27        146.944  0.05 1.00000 #> facA:facB     1    27         13.611  0.05 0.94467"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Power of contrasts — pwr.contrast","title":"Power of contrasts — pwr.contrast","text":"Calculate power testing various contrasts. syntax emmeans package employed specify contrast types.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power of contrasts — pwr.contrast","text":"","code":"pwr.contrast(design, specs, method, alpha = 0.05, ...)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power of contrasts — pwr.contrast","text":"design design object created using design generating functions. specs argument inherited emmeans specifying names factors contrasts performed. method argument inherited contrast specifying method contrasts, e.g., pairwise, linear, polynomials. alpha significance level (type error rate), default 0.05 ... arguments passed contrast.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power of contrasts — pwr.contrast","text":"data frame showing power specific contrast","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power of contrasts — pwr.contrast","text":"","code":"rcbd = designRCBD(treatments = c(2, 2), blocks = 10, beta = c(10, 9, 8, 7), VarCov = 10, sigma2 = 9) pwr.contrast(rcbd, specs = ~ facA|facB, method = \"pairwise\") #>        contrast facB estimate df non-centrality alpha     power #> 1 facA1 - facA2    1       -9 27        45.0000  0.05 0.9999965 #> 2 facA1 - facA2    2      -16 27       142.2222  0.05 1.0000000"},{"path":"https://an-ethz.github.io/pwr4exp/reference/theta.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Naming theta Naming the vector in the order of model specification and in the actual order used in the model — theta.names","title":"Naming theta Naming the vector in the order of model specification and in the actual order used in the model — theta.names","text":"Naming theta Naming vector order model specification actual order used model","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/theta.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Naming theta Naming the vector in the order of model specification and in the actual order used in the model — theta.names","text":"","code":"theta.names(data, formula)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/theta.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Naming theta Naming the vector in the order of model specification and in the actual order used in the model — theta.names","text":"data data frame formula model formula","code":""},{"path":"https://an-ethz.github.io/pwr4exp/news/index.html","id":"pwr4exp-development-version","dir":"Changelog","previous_headings":"","what":"pwr4exp (development version)","title":"pwr4exp (development version)","text":"Initial CRAN submission.","code":""}]
