[{"path":"https://wangkai7kkw.github.io/pwr4exp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 pwr4exp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/pwr4exp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"pwr4exp: Power Analysis for Experimental Designs","text":"pwr4exp R package offers functionality power analysis sample size determination standard common designs animal studies, can used various complex experimental designs. section provides overview functionality within pwr4exp explains common arguments used functions. perform power analysis pwr4exp involves two steps:","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/pwr4exp.html","id":"step1-creating-a-design-object","dir":"Articles","previous_headings":"Introduction","what":"Step1: creating a design object","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Design objects pwr4exp can created using functions generate several standard experimental designs available package. functions include designCRD complete randomized design (CRD), designRCBD randomized complete block design (RCBD), designLSD Latin Square design (LSD), designCOD crossover design (COD), designSPD split-plot design (SPD). arguments functions fall following main categories: Treatment structure: arguments treatments, trt.main, trt.sub used specify treatment structure designs SPD, case SPD, refer main plot subplot levels, respectively. treatment structure defined integer-valued vector, length vector indicates number treatment factors, value represents number levels factor. maximum two factors allowed, arranged factorial design. instance, treatments = 2 used define experiment involving two treatments (e.g., control vs. intervention). case two factors, treatments = c(2, 2) sets “2x2” factorial design two factors arranged study main effects interactions. case SPD, trt.main trt.sub allow hierarchical structuring treatments. example, trt.main = 2 specifies two levels main plot treatment factor, trt.sub = c(2, 2) defines “2 × 2” factorial design subplot level. Label: optional argument label accepts list specifies names treatment factors corresponding level labels. element list represents factor, name element name factor. value element vector containing labels factor’s levels. provided, default name “trt” assigned single treatment factor, “facA” “facB” used two treatment factors. levels factor sequentially coded “1”, “2”, , specified label. example, list(trt = c(\"ad libitum\", \"fasting\")) uses default name single treatment factor, customizes levels “ad libitum” “fasting.” multiple factors, list(feed = c(\"``ad libitum``\", \"``fasting``\"), dosage = c(\"D0\", \"D1\", \"D2\")), first factor named “feed” levels “ad libitum” “fasting” second factor named “dosage” levels “D0,” “D1,” “D2.” Replication: Given distinct replicating mechanisms, three arguments replicates, blocks, squares used represent replication indicate sample size different designs. argument replicates specifies number experimental units per treatment CRD number main plots (.e., number experimental units per treatment main plot) SPD; blocks specifies number blocks RCBD; squares specifies number squares replicated LSD crossover design. CRD, replicates = 10 along treatments = 4 (treatments = c(2, 2)) indicate treatment group consists 10 experimental units, resulting total 40 experimental units. configuring SPD, replicates = 10 combined trt.main = 4 (trt.main = c(2, 2)) signifies main plot treatment replicated across 10 experimental units, accumulating 40 main plots total. RCBD, argument blocks = 10 used conjunction treatments = 4 (treatments = c(2, 2)) ensures four treatments replicated across 10 different blocks, leading total 40 experimental units. LSD, setting squares = 3 alongside treatments = 4 (treatments = c(2, 2)) implies replication layout single “4×4” square 3 times, resulting total 48 experimental units. Model: formula argument specifies formula used test effects post-experimental data analysis. formula follows syntax used R’s lm (procedure linear models) lmer (procedure LMM) functions specify fixed random effects. design-generating function within package comes default model formula. default model formula incorporates interaction terms two treatment factors present fits blocking factors random effects. Effect Size: beta argument represents model coefficients. noteworthy coefficients categorical variables coefficients dummy variables created using contr.treatment contrast coding R. coding scheme designates first level categorical factor reference level creates indicator variables levels compare reference. coefficient reference level mean level. coefficients levels interpreted difference reference level. example, considering factor 2 levels (treatments = 2), control vs. intervention (optional, label = list(trt = c(\"control\", \"intervention\"))), beta = c(10, 5), indicates mean control group 10, effect intervention 5 units higher control. another example “2 × 2” factorial arrangement treatments, e.g, treatments = c(2, 2) & label= list(= c(\"A1\", \"A2\"), B = c(\"B1\", \"B2\")), assume expected outcomes combination two factors follows: B1B2A1106A2812 \\begin{array}{c|c|c}   & B1 & B2 \\\\ \\hline A1 & 10 & 6 \\\\ A2 & 8  & 12 \\\\ \\end{array} argument effect size reflects beta = c(intercept = 10, A2 = -2, B2 = -4, A2B2 = 8), indicates mean reference level (A1B1), effect A2 alone (A2B1 - A1B1), effect B2 alone (A1B2 - A1B1), interaction A2 B2 (A2B2 - A2B1 - A1B2 + A1B1), .e., additional effect combining A2B2 compared expected sum individual effects A2 B2. important mention values beta indicate population values (.e., expectations), usually unknown must derived informed assumptions. values can either directly transformed group means demonstrated. Variance-Covariance: VarCov specifies variance-covariance components random effects. multiple random effects one grouping factor, provide variance-covariance components matrix matches order random effects specified model formula. instance, covariance matrix random intercepts random slopes one grouping factor structured : (τ02τ12τ12τ12) \\begin{pmatrix} \\tau_0^2 & \\tau_{12} \\\\ \\tau_{12} & \\tau_1^2 \\end{pmatrix} τ02\\tau_0^2 variance random intercept, τ12\\tau_1^2 variance random slope, τ12\\tau_{12} covariance . standard designs available pwr4exp, corresponding LMM typically simplest variance component models, .e., models without random slopes. example, RCBD block random effect, input required variance blocks VarCov=τb2\\text{VarCov} = \\tau_b^2. multiple grouping factors, provide variance-covariance matrix grouping factor list. example, LSD row column blocks random effects, required inputs VarCov=list(τr2,τc2)\\text{VarCov} = list(\\tau_r^2, \\tau_c^2), representing variances row column blocks, respectively. Error Variance: sigma2 variance random error model. design available package can potentially constructed using function designCustom. required inputs include design.df, design.name, formula, beta, VarCov, sigma2. arguments defined except design.df, indicates data frame columns independent variables, outlining structure data collected experiment, include response variable. Optionally, name customized design can specified using design.name.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/pwr4exp.html","id":"step2-power-or-sample-size-calculation","dir":"Articles","previous_headings":"Introduction","what":"Step2: power or sample size calculation","title":"pwr4exp: Power Analysis for Experimental Designs","text":"design object created, calculating power sample size straightforward. Power omnibus tests, including main effects interactions (included model specified creation design object), can calculated using pwr.anova(design = , alpha = ) function. required inputs include: design, refers design object, alpha, indicating Type error rate, default value 0.05, specified. hand, power specific contrasts can calculated using pwr.contrast(design = , alpha = , spec = , method = ). syntax emmeans package inherited specify contrasts interest. required inputs : design alpha defined pwr.anova function spec, argument inherited emmeans specifying names factors contrasts performed, method, another argument inherited emmeans specifying method contrasts, e.g., pairwise, linear, polynomials. minimal sample size needed achieve target power can determined using find_sample_size(design.quote = , alpha = , target.power = , n_init = , n_max = ). procedure uses iterative approach find minimum replications traversing series integers. required inputs : design.quote, quoted design object unknown unevaluated replications evaluated varying values, alpha defined pwr.anova function, target.power, can single value specifying target power effects vector values individual target power levels effect, n_init initial replications iterative process, default value set 2, n_max maximum number replications iterative process, default value 99. function calculates minimum sample size necessary incrementally checking integers n_init n_max. Currently, sample size determination available omnibus tests specific contrasts pwr4exp.","code":""},{"path":[]},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/pwr4exp.html","id":"crd-with-one-treatment-factor","dir":"Articles","previous_headings":"Completely Randomized Design","what":"CRD with one treatment factor","title":"pwr4exp: Power Analysis for Experimental Designs","text":"following design profile used create exemplary CRD one treatment factor: Treatments: 1 treatment factor 4 levels. Replicates: 8 experimental units 4 groups. Mean effect size: mean control group 35, effects three treatments -5, +2, +3. Error variance: variance response variable 15. specified, treatment factor named “trt” levels labeled “1”, “2”, “3”, “4” default. corresponding design generated using designCRD function: Power omnibus test (.e., F-test) can calculated using pwr.anova function. type error rate 0.05, power testing overall difference among treatments 0.95467. function pwr.contrat can used assess power specific contrasts. calculate power detecting differences levels control, contrast method = rt.vs.ctrl treatment factor (specs = ~ trt) can defined according specification emmeans package. Another example demonstrate specifying contrast vectors involves contrasts interest: trt4 vs. trt1 (control) comparing combined effect trt1 trt2 trt3 trt4.","code":"crd1 <- designCRD(   treatments = 4,   replicates = 8,   beta = c(35, -5, 2, 3),   sigma2 = 15 ) pwr.anova(design = crd1) #> Power analysis of Completely randomized design #>     NumDF DenDF non-centrality alpha   power #> trt     3    28         20.267  0.05 0.95467 pwr.contrast(design = crd1, specs =  ~ trt, method = \"trt.vs.ctrl\") #>      contrast estimate df non-centrality alpha     power #> 1 trt2 - trt1       -5 28       6.666667  0.05 0.7028739 #> 2 trt3 - trt1        2 28       1.066667  0.05 0.1694975 #> 3 trt4 - trt1        3 28       2.400000  0.05 0.3216803 pwr.contrast(design = crd1,               specs =  ~ trt,               method = list(`trt4-trt2` = c(0, -1, 0, 1),                            `trt12-trt34` = c(.5, .5, -.5, -.5))) #>      contrast estimate df non-centrality alpha     power #> 1   trt4-trt2        8 28       17.06667  0.05 0.9786069 #> 2 trt12-trt34       -5 28       13.33333  0.05 0.9410503"},{"path":"https://wangkai7kkw.github.io/pwr4exp/articles/pwr4exp.html","id":"crd-with-2x2-factorial-treatments","dir":"Articles","previous_headings":"Completely Randomized Design","what":"CRD with “2x2” factorial treatments","title":"pwr4exp: Power Analysis for Experimental Designs","text":"following design profile used create exemplary CRD two treatment factors: Treatments: 2 treatment factors 2 levels. Label: two factors “facA” levels “A1” “A2”, “facB” levels “B1” “B2”. Replicates: 8 experimental units 4 groups. Mean effect size: mean control (A1B1) 35. effect A2 alone increase 5 units, effect B2 alone increase 3 units. interaction A2 B2 introduces additional effect -2 units, resulting combined effect A2 B2 (-2) sum individual effects. corresponding cell means :B1B2A13538A24041 \\begin{array}{c|c|c}   & B1 & B2 \\\\ \\hline A1 & 35 & 38 \\\\ A2 & 40  & 41 \\\\ \\end{array} Error variance: variance response variable 15. design can created follows: power omnibus test: power detecting effect factor , overall within level factor B, can assessed follows: number units per treatment required achieve target power can determined using find_sample_size, employs iterative approach. quoted design object, replicates = n remains unevaluated, created first. best sample size target power within range n_int n_max can determined:","code":"crd2 <- designCRD(   treatments = c(2, 2),   replicates = 8,   label = list(facA = c(\"A1\", \"A2\"), facB = c(\"B1\", \"B2\")),   beta = c(35, 5, 3, -2),   sigma2 = 15 ) pwr.anova(design = crd2) #> Power analysis of Completely randomized design #>           NumDF DenDF non-centrality alpha   power #> facA          1    28         8.5333  0.05 0.80504 #> facB          1    28         2.1333  0.05 0.29178 #> facA:facB     1    28         0.5333  0.05 0.10868 # main effect of facA pwr.contrast(design = crd2, specs = ~ \"facA\", method = \"pairwise\") #> NOTE: Results may be misleading due to involvement in interactions #>   contrast estimate df non-centrality alpha     power #> 1  A1 - A2       -4 28       8.533333  0.05 0.8050374 # effect of facA under B1 and B2, respectively pwr.contrast(design = crd2, specs = ~ facA|facB, method = \"pairwise\") #>   contrast facB estimate df non-centrality alpha     power #> 1  A1 - A2   B1       -5 28       6.666667  0.05 0.7028739 #> 2  A1 - A2   B2       -3 28       2.400000  0.05 0.3216803 crd_quote <- quote(   designCRD(   treatments = c(2, 2),   replicates = n,   label = list(facA = c(\"A1\", \"A2\"), facB = c(\"B1\", \"B2\")),   beta = c(35, 5, 3, -2),   sigma2 = 15   ) ) find_sample_size(design.quote = crd_quote, n_init = 2, n_max = 99) #>           alpha     power best_n #> facA       0.05 0.8050374      8 #> facB       0.05 0.8009381     30 #> facA:facB  0.05 0.7266769     99"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://wangkai7kkw.github.io/pwr4exp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Wang. Author, maintainer.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang K (2024). pwr4exp: Power Analysis Experiment Designs Animal Studies. R package version 0.0.0.9000, https://wangkai7kkw.github.io/pwr4exp/, https://github.com/-ethz/pwr4exp, https://github.com/WangKai7kkw/pwr4exp.","code":"@Manual{,   title = {pwr4exp: Power Analysis for Experiment Designs in Animal Studies},   author = {Kai Wang},   year = {2024},   note = {R package version 0.0.0.9000, https://wangkai7kkw.github.io/pwr4exp/, https://github.com/an-ethz/pwr4exp},   url = {https://github.com/WangKai7kkw/pwr4exp}, }"},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"pwr4exp","dir":"","previous_headings":"","what":"Power Analysis for Experiment Designs in Animal Studies","title":"Power Analysis for Experiment Designs in Animal Studies","text":"pwr4exp package R package provides functions power calculation sample size determination animal experiments. package emphasizes importance specifying models conducting power analyses supports power analyses main effects, interactions, specific contrasts. Additionally, pwr4exp offers flexible framework perform power analysis customized designs currently predefined package.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power Analysis for Experiment Designs in Animal Studies","text":"can install development version pwr4exp GitHub :","code":"devtools::install_github(\"WangKai7kkw/pwr4exp\") #Load the package browseVignettes(\"pwr4exp\")"},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Power Analysis for Experiment Designs in Animal Studies","text":"Performing power analysis pwr4exp involves following steps: - First, create desired design object using design generating functions. - design object created, calculating power determining sample size using pwr4exp straightforward. Simply pass design object power calculator main effects interactions, pwr.anova(), contrasts, pwr.contrast(). - determine minimal sample size achieve target power, quoted design object can passed function find_sample_size().","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"example-usage","dir":"","previous_headings":"Functions","what":"Example Usage","title":"Power Analysis for Experiment Designs in Animal Studies","text":"’s example can generate design calculate power:","code":"library(pwr4exp) # Define a design crd <- designRCBD(   treatments = c(2, 2),   label = list(facA = c(\"A1\", \"A2\"), facB = c(\"B1\", \"B2\")),   blocks = 10,   formula = y ~ facA*facB + (1|block),   beta = c(470, 30, -55, 5),   VarCov = 3200,   sigma2 = 3200 )  # Calculate power of ominubus test (i.e., F-test) pwr.anova(design = crd)  # Calculate power for contrasts pwr.contrast(design = crd, specs = ~ facB | facA, contrast = \"pairwise\")"},{"path":"https://wangkai7kkw.github.io/pwr4exp/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"Power Analysis for Experiment Designs in Animal Studies","text":"learn pwr4exp, read vignette pwr4exp contains: Details provide required inputs. Examples conducting power analysis standard designs available package. Examples using pwr4exp assess power customized design. Additionally, information available package website. documentation package updated. questions suggestions, please feel free contact package maintainer.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate covariance parameter vector (theta) — calc.theta","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"function calculates covariance parameters","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"","code":"calc.theta(VarCov, sigma)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"VarCov variance-covariance components random effects. multiple random effects one grouping factor, provide variance-covariance matrix. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma error standard deviation.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"covariance parameter vector","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/calc.theta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate covariance parameter vector (theta) — calc.theta","text":"details structure estimation theta, refer documentation getME function lme4 package.","code":""},{"path":[]},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/customLmerMod-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend lmerModLmerTest class — customLmerMod-class","title":"Extend lmerModLmerTest class — customLmerMod-class","text":"class extends lmerModLmerTest adding DenDF slot.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/customLmerMod-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Extend lmerModLmerTest class — customLmerMod-class","text":"DenDF Numeric vector denominator degrees freedom.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Crossover Design — designCOD","title":"Create a Crossover Design — designCOD","text":"crossover design specific type case LSD, time period serves block, period blocks reused replicating squares.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Crossover Design — designCOD","text":"","code":"designCOD(treatments, label, squares, formula, beta, VarCov, sigma2, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Crossover Design — designCOD","text":"treatments vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. label Optional. list specifying names treatment factors corresponding level labels. element list represents factor, name element name factor. value element vector containing labels factor's levels. default, name one treatment factor \"trt,\" names two treatment factors \"facA\" \"facB,\" respectively. levels factor coded \"1\", \"2\", ..., specified label. example, list(trt = c(\"A1\", \"A2\")) assigns name \"trt\" treatment factor, levels labeled \"A1\" \"A2.\" multiple factors, list(= c(\"A1\", \"A2\"), B = c(\"B1\", \"B2\", \"B3\")), first factor named \"\" levels \"A1\" \"A2,\" second factor named \"B\" levels \"B1,\" \"B2,\" \"B3.\" squares number replicated squares formula symbolic description model used test treatment effects post-experimental data analysis. way writing formula , see lm fixed effects lmer random effects. default formula one treatment factor two treatment factors y ~ trt + (1|subject) + (1|period) y ~ facA*facB + (1|subject) + (1|period), respectively, label argument supplied, names treatment factors replaced corresponding names specified label. response variable formula always denoted y, row column block factors always denoted subject period. beta vector expectations model coefficients.coefficients categorical variables coefficients dummy variables created using contr.treatment contrast coding. VarCov variance-covariance components random effects. multiple random effects one grouping factor, provide variance-covariance matrix. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance ... arguments passed anova function lmerTest. type ANOVA table, Type III default, method computing denominator degrees freedom, Satterthwaite's method default, can changed. details, see anova.lmerModLmerTest.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Crossover Design — designCOD","text":"object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Completely Randomized Design — designCRD","title":"Create a Completely Randomized Design — designCRD","text":"Create Completely Randomized Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Completely Randomized Design — designCRD","text":"","code":"designCRD(treatments, label, replicates, formula, beta, sigma2)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Completely Randomized Design — designCRD","text":"treatments vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. maximum two factors allowed, arranged factorial design. example, treatments=c(2,3) specifies \"2x3\" factorial design two treatment factors 2 3 levels, respectively. label Optional. list specifying names treatment factors corresponding level labels. element list represents factor, name element name factor. value element vector containing labels factor's levels. default, name one treatment factor \"trt,\" names two treatment factors \"facA\" \"facB,\" respectively. levels factor coded \"1\", \"2\", ..., specified label. example, list(trt = c(\"A1\", \"A2\")) assigns name \"trt\" treatment factor, levels labeled \"A1\" \"A2.\" multiple factors, list(= c(\"A1\", \"A2\"), B = c(\"B1\", \"B2\", \"B3\")), first factor named \"\" levels \"A1\" \"A2,\" second factor named \"B\" levels \"B1,\" \"B2,\" \"B3.\" replicates number experimental units per group. one-factor design, 'group' refers levels factor. two-factor design, 'group' refers combination levels two factors. formula symbolic description model used test treatment effects post-experimental data analysis. way writing formula , see lm fixed effects lmer random effects. default formula one treatment factor two treatment factors y ~ trt  y ~ facA*facB, respectively, label argument supplied, names treatment factors replaced corresponding names specified label. response variable formula always denoted y. beta vector expectations model coefficients.coefficients categorical variables coefficients dummy variables created using contr.treatment contrast coding. sigma2 error variance","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCRD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Completely Randomized Design — designCRD","text":"object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCustom.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Customized Design — designCustom","title":"Create a Customized Design — designCustom","text":"Create Customized Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCustom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Customized Design — designCustom","text":"","code":"designCustom(design.df, formula, beta, VarCov, sigma2, design.name, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCustom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Customized Design — designCustom","text":"design.df data frame containing values independent variables columns formula object class formula: symbolic description model used test effects post-experimental data analysis. details model specification, see lm fixed effects lmer random effects. beta vector expectations model coefficients.coefficients categorical variables coefficients dummy variables created using contr.treatment contrast coding. VarCov variance-covariance components random effects. multiple random effects one grouping factor, provide variance-covariance matrix. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance design.name optional, name design ... arguments passed anova function lmerTest. type ANOVA table, Type III default, method computing denominator degrees freedom, Satterthwaite's method default, can changed. details, see anova.lmerModLmerTest.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designCustom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Customized Design — designCustom","text":"object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Latin Square Design — designLSD","title":"Create a Latin Square Design — designLSD","text":"Create Latin Square Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Latin Square Design — designLSD","text":"","code":"designLSD(   treatments,   label,   squares = 1,   reuse = c(\"row\", \"col\", \"both\"),   formula,   beta,   VarCov,   sigma2,   ... )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Latin Square Design — designLSD","text":"treatments vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. label Optional. list specifying names treatment factors corresponding level labels. element list represents factor, name element name factor. value element vector containing labels factor's levels. default, name one treatment factor \"trt,\" names two treatment factors \"facA\" \"facB,\" respectively. levels factor coded \"1\", \"2\", ..., specified label. example, list(trt = c(\"A1\", \"A2\")) assigns name \"trt\" treatment factor, levels labeled \"A1\" \"A2.\" multiple factors, list(= c(\"A1\", \"A2\"), B = c(\"B1\", \"B2\", \"B3\")), first factor named \"\" levels \"A1\" \"A2,\" second factor named \"B\" levels \"B1,\" \"B2,\" \"B3.\" squares number replicated squares reuse character string: \"row\", \"col\", \"\", indicating reuse rows columns replicate Latin square formula symbolic description model used test treatment effects post-experimental data analysis. way writing formula , see lm fixed effects lmer random effects. default formula one treatment factor two treatment factors y ~ trt + (1|row) + (1|col) y ~ facA*facB + (1|row) + (1|col), respectively, label argument supplied, names treatment factors replaced corresponding names specified label. Column factor (1|col) default formula replaced (1|square/col) row factors reused, row factor (1|row) replaced (1|square/row) column factors reused. row column factors resued, random effects model denoted (1|square) + (1|square:row) + (1|square:col). response variable formula always denoted y, row column block factors always denoted row col. beta vector expectations model coefficients.coefficients categorical variables coefficients dummy variables created using contr.treatment contrast coding. VarCov variance-covariance components random effects. multiple random effects one grouping factor, provide variance-covariance matrix. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance ... arguments passed anova function lmerTest. type ANOVA table, Type III default, method computing denominator degrees freedom, Satterthwaite's method default, can changed. details, see anova.lmerModLmerTest.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designLSD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Latin Square Design — designLSD","text":"object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCBD.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Randomized Complete Block Design — designRCBD","title":"Create an Randomized Complete Block Design — designRCBD","text":"Create Randomized Complete Block Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCBD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Randomized Complete Block Design — designRCBD","text":"","code":"designRCBD(treatments, label, blocks, formula, beta, VarCov, sigma2, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCBD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Randomized Complete Block Design — designRCBD","text":"treatments vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. label Optional. list specifying names treatment factors corresponding level labels. element list represents factor, name element name factor. value element vector containing labels factor's levels. default, name one treatment factor \"trt,\" names two treatment factors \"facA\" \"facB,\" respectively. levels factor coded \"1\", \"2\", ..., specified label. example, list(trt = c(\"A1\", \"A2\")) assigns name \"trt\" treatment factor, levels labeled \"A1\" \"A2.\" multiple factors, list(= c(\"A1\", \"A2\"), B = c(\"B1\", \"B2\", \"B3\")), first factor named \"\" levels \"A1\" \"A2,\" second factor named \"B\" levels \"B1,\" \"B2,\" \"B3.\" blocks number blocks formula symbolic description model used test treatment effects post-experimental data analysis. way writing formula , see lm fixed effects lmer random effects. default formula one treatment factor two treatment factors y ~ trt + (1|block) y ~ facA*facB +(1|block), respectively, label argument supplied, names treatment factors replaced corresponding names specified label. response variable formula always denoted y, block factor always denoted block. beta vector expectations model coefficients.coefficients categorical variables coefficients dummy variables created using contr.treatment contrast coding. VarCov variance-covariance components random effects. multiple random effects one grouping factor, provide variance-covariance matrix. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance ... arguments passed anova function lmerTest. type ANOVA table, Type III default, method computing denominator degrees freedom, Satterthwaite's method default, can changed. details, see anova.lmerModLmerTest.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designRCBD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Randomized Complete Block Design — designRCBD","text":"object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSPD.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Split Plot Design — designSPD","title":"Create a Split Plot Design — designSPD","text":"Create Split Plot Design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSPD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Split Plot Design — designSPD","text":"","code":"designSPD(   trt.main,   trt.sub,   label,   replicates,   formula,   beta,   VarCov,   sigma2,   ... )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSPD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Split Plot Design — designSPD","text":"trt.main vector specifying treatment structure main plot level, length vector indicates number main plot factors, value represents number levels factor. trt.sub vector specifying treatment structure main plot level, length vector indicates number main plot factors, value represents number levels factor. label Optional. list specifying names treatment factors corresponding level labels. element list represents factor, name element name factor. value element vector containing labels factor's levels. default, name one treatment factor \"trt,\" names two treatment factors \"facA\" \"facB,\" respectively. levels factor coded \"1\", \"2\", ..., specified label. example, list(trt = c(\"A1\", \"A2\")) assigns name \"trt\" treatment factor, levels labeled \"A1\" \"A2.\" multiple factors, list(= c(\"A1\", \"A2\"), B = c(\"B1\", \"B2\", \"B3\")), first factor named \"\" levels \"A1\" \"A2,\" second factor named \"B\" levels \"B1,\" \"B2,\" \"B3.\" replicates number main plots per treatment group main plot factors formula symbolic description model used test treatment effects post-experimental data analysis. way writing formula , see lm fixed effects lmer random effects. response variable formula always denoted y, experimental unit main plot level (aka. block factor subplot level) always denoted mainplots. default formula contains main effects treatment factors main sub- plot levels, interactions factors, random effects main plots y ~ . + (1|mainplots). replaced corresponding names specified label. Column factor (1|col) default formula replaced (1|square/col) row factors reused, row factor (1|row) replaced (1|square/row) column factors reused. row column factors resued, random effects model denoted (1|square) + (1|square:row) + (1|square:col). beta vector expectations model coefficients.coefficients categorical variables coefficients dummy variables created using contr.treatment contrast coding. VarCov variance-covariance components random effects. multiple random effects one grouping factor, provide variance-covariance matrix. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma2 error variance ... arguments passed anova function lmerTest. type ANOVA table, Type III default, method computing denominator degrees freedom, Satterthwaite's method default, can changed. details, see anova.lmerModLmerTest.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/designSPD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Split Plot Design — designSPD","text":"object containing design name, design data frame, model formula, pseudo model object expected effect size variance-covariance components random effects.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.cod.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame for Crossover design — df.cod","title":"Create a data frame for Crossover design — df.cod","text":"Create data frame Crossover design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.cod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame for Crossover design — df.cod","text":"","code":"df.cod(treatments, label, squares)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.cod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame for Crossover design — df.cod","text":"treatments vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. label optional, names treatments factors levels can specified list. squares number replicated squares","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.cod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame for Crossover design — df.cod","text":"data.frame columns treatment factors, individuals (row block factor), period (column block factor), squares","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of completely randomized design — df.crd","title":"Create a data frame of completely randomized design — df.crd","text":"Create data frame completely randomized design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of completely randomized design — df.crd","text":"","code":"df.crd(treatments, label, replicates)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of completely randomized design — df.crd","text":"treatments vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. label optional, names treatments factors levels can specified list. replicates number experimental units per group. one-factor design, 'group' refers levels factor. two-factor design, 'group' refers combination levels two factors.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.crd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of completely randomized design — df.crd","text":"data.frame columns treatment factors replicates","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame for Latin square design — df.lsd","title":"Create a data frame for Latin square design — df.lsd","text":"Create data frame Latin square design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame for Latin square design — df.lsd","text":"","code":"df.lsd(treatments, label, squares = 1, reuse = c(\"row\", \"col\", \"both\"))"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame for Latin square design — df.lsd","text":"treatments vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. label optional, names treatments factors levels can specified list. squares number replicated squares reuse character string: \"row\", \"col\", \"\", indicating reuse rows columns replicate Latin square","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.lsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame for Latin square design — df.lsd","text":"data.frame columns treatment factors, row column block factors, squares","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcbd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of randomized complete block design — df.rcbd","title":"Create a data frame of randomized complete block design — df.rcbd","text":"Create data frame randomized complete block design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcbd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of randomized complete block design — df.rcbd","text":"","code":"df.rcbd(treatments, label, blocks)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcbd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of randomized complete block design — df.rcbd","text":"treatments vector specifying treatment structure, length vector indicates number treatment factors, value represents number levels factor. example, treatments=c(2,3) specifies two treatment factors 2 3 levels, respectively. label optional, names treatments factors levels can specified list. blocks number blocks","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.rcbd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of randomized complete block design — df.rcbd","text":"data.frame columns blocks treatment factors","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.spd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for split-plot design — df.spd","title":"Create data frame for split-plot design — df.spd","text":"Create data frame split-plot design","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.spd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for split-plot design — df.spd","text":"","code":"df.spd(trt.main, trt.sub, label, replicates)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.spd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for split-plot design — df.spd","text":"trt.main vector specifying treatment structure main plot level, length vector indicates number main plot factors, value represents number levels factor. trt.sub vector specifying treatment structure main plot level, length vector indicates number main plot factors, value represents number levels factor. label optional, names treatments factors levels can specified list. replicates number main plots per treatment group main plot factors","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/df.spd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for split-plot design — df.spd","text":"data.frame columns main plots, main treatments, sub-treatments","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/find_sample_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the sample size required to achieve target power — find_sample_size","title":"Determine the sample size required to achieve target power — find_sample_size","text":"function finds sample size required achieve target power given.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/find_sample_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the sample size required to achieve target power — find_sample_size","text":"","code":"find_sample_size(   design.quote,   alpha = 0.05,   target.power = 0.8,   n_init = 2,   n_max = 99,   ... )"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/find_sample_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the sample size required to achieve target power — find_sample_size","text":"design.quote quoted design object replications unknown evaluated, denoted \"n\" alpha significance level, default 0.05 target.power target power achieve, default 0.8 n_init initial sample size start , default 2 n_max maximum sample size try, default 99 ... Additional arguments pass pwr.anova","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/find_sample_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the sample size required to achieve target power — find_sample_size","text":"data frame alpha, power, best sample size sample size tried","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/fit.pseu.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an artificial model object — fit.pseu.model","title":"Create an artificial model object — fit.pseu.model","text":"Create pseudo-model object response variable simulated according fixed random effects. Model coefficients replaced expectations specified argument beta. Variance-covariance components random effects replaced values specified argument VarCov. standard deviation random error replaced argument sigma. Creating pseudo-model facilitates power calculations leveraging anova function lmerTest Anova function car.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/fit.pseu.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an artificial model object — fit.pseu.model","text":"","code":"fit.pseu.model(formula, data, beta, VarCov, sigma, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/fit.pseu.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an artificial model object — fit.pseu.model","text":"formula object class formula: symbolic description model used test effects post-experimental data analysis. details model specification, see lm fixed effects lmer random effects. data data frame independent variables design columns, e.g., treatment factors block factors. beta vector expectations model coefficients. coefficients categorical variables coefficients dummy variables created using contr.treatment contrast coding. VarCov variance-covariance components random effects. multiple random effects one grouping factor, provide variance-covariance matrix. multiple grouping factors, supply variance-covariance matrix grouping factor list. sigma standard deviation error ... arguments passed anova function lmerTest. type ANOVA table, Type III default, method computing denominator degrees freedom, Satterthwaite's method default, can changed. details, see anova.lmerModLmerTest.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/fit.pseu.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an artificial model object — fit.pseu.model","text":"pseudo model object.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Power calculation for omnibus test — pwr.anova","title":"Power calculation for omnibus test — pwr.anova","text":"Calculate power testing overall effects treatment factors interactions, .e., ANOVA test.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power calculation for omnibus test — pwr.anova","text":"","code":"pwr.anova(design, alpha, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power calculation for omnibus test — pwr.anova","text":"design design object created using design generating functions, designCRD, designRCBD, designLSD,  designCOD, designSPD, designCustom alpha significance level (type error rate), default 0.05 ... #' arguments passed anova function lmerTest linear mixed models Anova function car linear models. type ANOVA table, Type III default, method computing denominator degrees freedom, Satterthwaite's method default, can changed. details, see anova.lmerModLmerTest Anova. linear mixed models, arguments also defined design-generating functions passing design object pwr.anova function.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power calculation for omnibus test — pwr.anova","text":"data frame","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power calculation for omnibus test — pwr.anova","text":"","code":"# generate an RCBD rcbd = designRCBD(treatments = c(2, 2), blocks = 10, beta = c(10, 9, 8, 7), VarCov = 10, sigma2 = 9) pwr.anova(rcbd) #> Power analysis of Randomized complete block design #>           NumDF DenDF non-centrality alpha   power #> facA          1    27        173.611  0.05 1.00000 #> facB          1    27        146.944  0.05 1.00000 #> facA:facB     1    27         13.611  0.05 0.94467"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Power calculation for contrasts — pwr.contrast","title":"Power calculation for contrasts — pwr.contrast","text":"Calculate power testing various contrasts levels treatment factors. syntax emmeans package employed specify contrast types.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power calculation for contrasts — pwr.contrast","text":"","code":"pwr.contrast(design, specs, method, alpha = 0.05, ...)"},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power calculation for contrasts — pwr.contrast","text":"design design object created using design generating functions, designCRD, designRCBD, designLSD,  designCOD, designSPD, designCustom specs argument inherited emmeans specifying names factors contrasts performed method argument inherited contrast specifying method contrasts, e.g., pairwise, linear, polynomials. alpha significance level (type error rate), default 0.05 ... arguments passed contrast. default, kenward-roger approximation degrees freedom applied.","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power calculation for contrasts — pwr.contrast","text":"data frame","code":""},{"path":"https://wangkai7kkw.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power calculation for contrasts — pwr.contrast","text":"","code":"rcbd = designRCBD(treatments = c(2, 2), blocks = 10, beta = c(10, 9, 8, 7), VarCov = 10, sigma2 = 9) pwr.contrast(rcbd, specs = ~ facA|facB, method = \"pairwise\") #>        contrast facB estimate df non-centrality alpha     power #> 1 facA1 - facA2    1       -9 27        45.0000  0.05 0.9999965 #> 2 facA1 - facA2    2      -16 27       142.2222  0.05 1.0000000"}]
